<!DOCTYPE html>
<html lang='en'>
<head>
<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"caff0d62ed","applicationID":"3939478","transactionName":"IQ1XRUEOVV1dFxlRXAEXSlRATkpZVxI=","queueTime":0,"applicationTime":234,"agent":""}</script>
<script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,n,t){function r(t){if(!n[t]){var o=n[t]={exports:{}};e[t][0].call(o.exports,function(n){var o=e[t][1][n];return r(o||n)},o,o.exports)}return n[t].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<t.length;o++)r(t[o]);return r}({1:[function(e,n,t){function r(){}function o(e,n,t){return function(){return i(e,[c.now()].concat(u(arguments)),n?null:this,t),n?void 0:this}}var i=e("handle"),a=e(3),u=e(4),f=e("ee").get("tracer"),c=e("loader"),s=NREUM;"undefined"==typeof window.newrelic&&(newrelic=s);var p=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],d="api-",l=d+"ixn-";a(p,function(e,n){s[n]=o(d+n,!0,"api")}),s.addPageAction=o(d+"addPageAction",!0),s.setCurrentRouteName=o(d+"routeName",!0),n.exports=newrelic,s.interaction=function(){return(new r).get()};var m=r.prototype={createTracer:function(e,n){var t={},r=this,o="function"==typeof n;return i(l+"tracer",[c.now(),e,t],r),function(){if(f.emit((o?"":"no-")+"fn-start",[c.now(),r,o],t),o)try{return n.apply(this,arguments)}catch(e){throw f.emit("fn-err",[arguments,this,e],t),e}finally{f.emit("fn-end",[c.now()],t)}}}};a("actionText,setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,n){m[n]=o(l+n)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,c.now()])}},{}],2:[function(e,n,t){function r(e,n){if(!o)return!1;if(e!==o)return!1;if(!n)return!0;if(!i)return!1;for(var t=i.split("."),r=n.split("."),a=0;a<r.length;a++)if(r[a]!==t[a])return!1;return!0}var o=null,i=null,a=/Version\/(\S+)\s+Safari/;if(navigator.userAgent){var u=navigator.userAgent,f=u.match(a);f&&u.indexOf("Chrome")===-1&&u.indexOf("Chromium")===-1&&(o="Safari",i=f[1])}n.exports={agent:o,version:i,match:r}},{}],3:[function(e,n,t){function r(e,n){var t=[],r="",i=0;for(r in e)o.call(e,r)&&(t[i]=n(r,e[r]),i+=1);return t}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],4:[function(e,n,t){function r(e,n,t){n||(n=0),"undefined"==typeof t&&(t=e?e.length:0);for(var r=-1,o=t-n||0,i=Array(o<0?0:o);++r<o;)i[r]=e[n+r];return i}n.exports=r},{}],5:[function(e,n,t){n.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(e,n,t){function r(){}function o(e){function n(e){return e&&e instanceof r?e:e?f(e,u,i):i()}function t(t,r,o,i){if(!d.aborted||i){e&&e(t,r,o);for(var a=n(o),u=v(t),f=u.length,c=0;c<f;c++)u[c].apply(a,r);var p=s[y[t]];return p&&p.push([b,t,r,a]),a}}function l(e,n){h[e]=v(e).concat(n)}function m(e,n){var t=h[e];if(t)for(var r=0;r<t.length;r++)t[r]===n&&t.splice(r,1)}function v(e){return h[e]||[]}function g(e){return p[e]=p[e]||o(t)}function w(e,n){c(e,function(e,t){n=n||"feature",y[t]=n,n in s||(s[n]=[])})}var h={},y={},b={on:l,addEventListener:l,removeEventListener:m,emit:t,get:g,listeners:v,context:n,buffer:w,abort:a,aborted:!1};return b}function i(){return new r}function a(){(s.api||s.feature)&&(d.aborted=!0,s=d.backlog={})}var u="nr@context",f=e("gos"),c=e(3),s={},p={},d=n.exports=o();d.backlog=s},{}],gos:[function(e,n,t){function r(e,n,t){if(o.call(e,n))return e[n];var r=t();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,n,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[n]=r,r}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],handle:[function(e,n,t){function r(e,n,t,r){o.buffer([e],r),o.emit(e,n,t)}var o=e("ee").get("handle");n.exports=r,r.ee=o},{}],id:[function(e,n,t){function r(e){var n=typeof e;return!e||"object"!==n&&"function"!==n?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");n.exports=r},{}],loader:[function(e,n,t){function r(){if(!E++){var e=x.info=NREUM.info,n=l.getElementsByTagName("script")[0];if(setTimeout(s.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&n))return s.abort();c(y,function(n,t){e[n]||(e[n]=t)}),f("mark",["onload",a()+x.offset],null,"api");var t=l.createElement("script");t.src="https://"+e.agent,n.parentNode.insertBefore(t,n)}}function o(){"complete"===l.readyState&&i()}function i(){f("mark",["domContent",a()+x.offset],null,"api")}function a(){return O.exists&&performance.now?Math.round(performance.now()):(u=Math.max((new Date).getTime(),u))-x.offset}var u=(new Date).getTime(),f=e("handle"),c=e(3),s=e("ee"),p=e(2),d=window,l=d.document,m="addEventListener",v="attachEvent",g=d.XMLHttpRequest,w=g&&g.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:g,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var h=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1099.min.js"},b=g&&w&&w[m]&&!/CriOS/.test(navigator.userAgent),x=n.exports={offset:u,now:a,origin:h,features:{},xhrWrappable:b,userAgent:p};e(1),l[m]?(l[m]("DOMContentLoaded",i,!1),d[m]("load",r,!1)):(l[v]("onreadystatechange",o),d[v]("onload",r)),f("mark",["firstbyte",u],null,"api");var E=0,O=e(5)},{}]},{},["loader"]);</script>
<meta content='[]' name='optimize-experiments'>
<meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="QoX1BB0K+na90w0tYjKcZsfDnC7L+Eeu7pMfkKp5yZN4MJFcsVJoaZj0g3uc6pt0M3+onmTe3S3lDH9ZCNtvAQ==" />
<title>Developing on AWS - Lab 7 - End to End Application | Qwiklabs + exitcertified</title>
<meta content='width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=0' name='viewport'>
<meta content='Developing on AWS is a three-day instructor led course.' name='description'>
<meta content='Learn AWS, AWS Training, AWS Labs, Learn Amazon Web Services, Amazon Web Services Training, Amazon Web Services Labs' name='keywords'>
<meta content='Qwiklabs' name='author'>
<meta property="og:url" content="https://www.qwiklabs.com/classrooms/1712/labs/11147" /><link href="https://www.qwiklabs.com/classrooms/1712/labs/11147" rel="canonical" />
<meta content='1rRsY0INj8RvwB5EF5pwdxt2A2P9aDgAlsICaJ0d5w0' name='google-site-verification'>
<meta content='noindex' name='robots'>
<meta content='Developing on AWS - Lab 7 - End to End Application | Qwiklabs + exitcertified' property='og:title'>
<meta content='website' property='og:type'>
<meta content='/favicon-144.png' property='og:image'>
<meta content='Qwiklabs' property='og:site_name'>
<meta content='Developing on AWS is a three-day instructor led course.' property='og:description'>
<meta content='/qwiklabs_logo_900x887.png' property='og:logo' size='900x887'>
<meta content='/qwiklabs_logo_994x187.png' property='og:logo' size='994x187'>
<meta content='#3681E4' property='msapplication-TileColor'>
<meta content='/favicon-144.png' property='msapplication-TileImage'>
<link href='/favicon-32.png' rel='shortcut icon'>
<link color='#3681E4' href='/favicon-svg.svg' rel='mask-icon'>
<link href='/favicon-180.png' rel='apple-touch-icon-precomposed'>
<link rel="stylesheet" media="screen" href="https://fonts.googleapis.com/css?family=Oswald:400|Roboto+Mono:400,700|Roboto:300,400,500,700|Google+Sans:300,400,500,700|Google+Sans+Display:400|Material+Icons" />


<!--[if lt IE 9]>
<script src='http://html5shim.googlecode.com/svn/trunk/html5.js' type='text/javascript'></script>
<![endif]-->
<!--[endif]>  <![endif]-->
<script>
//<![CDATA[
window.gon={};gon.current_user={"firstname":"Niruban","lastname":"Kandasamy","fullname":"Niruban Kandasamy","company":"CRA","email":"niruban@gmail.com","origin":"exitcertified, direct","subscriptions":0,"id":"75be0980429c605a1723bd89d088564b","qlCreatedAt":"2018-12-04 14:48:35 UTC","optIn":true};gon.segment=null;gon.deployment="exitcertified";
//]]>
</script>



<link rel="stylesheet" media="all" href="https://cdn.qwiklabs.com/assets/application-6a8dde4066a5d619bd9a7e970640b996924789efe3aee810fdfda378f7cff6de.css" />
<script src="https://www.youtube.com/iframe_api"></script>
<script src="https://cdn.qwiklabs.com/polyfills/webcomponents-loader.js"></script>
<script src="https://cdn.qwiklabs.com/assets/application-be23faff1797c30ce2e0f75b9e6783dbf4d5d64b7867b3ba2e4c503116d9ef8b.js"></script>
<script src="https://cdn.qwiklabs.com/assets/hallofmirrors-d20e6c7de8f6c0aa61f607d15f888c94364c8aa21a1e848684cc347579f866c5.js"></script>
</head>
<body class='focuses focuses-show lab-show'>
<div class='header-container'>
<div class='header'>
<a class='mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect header__button header__button--nav header__side-menu-button js-side-menu-button'>
<i class='material-icons'>menu</i>
</a>
<div class='header__title'>
<a class="mdl-button mdl-js-button mdl-button--icon mdl-js-ripple-effect header__button header__button--nav" href="/classrooms/1712"><i class="material-icons">arrow_back</i></a>

<h1 class='headline-5'>
Developing on AWS - Lab 7 - End to End Application
</h1>
</div>
<div class='header__actions'>
<a class='header-my-account-button mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect js-my-account-button'>
<img class="avatar " src="https://secure.gravatar.com/avatar/4fe17da52f056093465eeebfcef52817.png?s=80&amp;d=mm" />
</a>
<div class='header-my-account-menu js-my-account-menu'>
<div class='card elevation-2 no-padding'>
<div class='my-account-menu__top'>
<img class="avatar " src="https://secure.gravatar.com/avatar/4fe17da52f056093465eeebfcef52817.png?s=80&amp;d=mm" />
<div class='my-account-menu__info'>
<h4 class='subtitle-headline-1'>
Niruban Kandasamy
</h4>
<p class='body-2 text--gray'>
<span>niruban@gmail.com</span>
</p>
<a class="button" href="/my_account/profile">My Account</a>
</div>
</div>
<div class='my-account-menu__bottom'>
<a class="button button--hairline" rel="nofollow" data-method="delete" href="/users/sign_out">Sign out</a>
</div>
</div>
</div>

</div>
</div>
</div>
<div class='header__search-bar js-header-search-bar'>
<form id="catalog-search-mobile" onsubmit="ql.catalogSearchFilter(); return false;" action="/searches/lab" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="IFGrz/NBsvt8RpG5qBr9nCE6QWYv7O3NtgNw/sZEloUa5M+XXxkg5FlhH+9WwvqO1YZ11oDKd069nBA3ZOYwFw==" />
<input type="text" name="keywords" id="keywords" placeholder="Search" />
</form>

<a class='mdl-button mdl-js-button mdl-button--icon mdl-js-ripple-effect header__button'>
<i class='material-icons'>close</i>
</a>
</div>

<nav class='side-menu js-side-menu'>
<div class='side-menu__inner' style='min-height: 346px;'>
<nav class='side-menu__nav'>
<a title="Home" class="side-menu__item js-navigation-button" href="/home"><div class='side-menu__item__icon'>
<i class='material-icons'>home</i>
</div>
<div class='side-menu__item__label'>
Home
</div>
</a>
<a title="Catalog" class="side-menu__item js-navigation-button" href="/catalog"><div class='side-menu__item__icon'>
<i class='material-icons'>school</i>
</div>
<div class='side-menu__item__label'>
Catalog
</div>
</a>
<a title="My Learning" class="side-menu__item js-navigation-button active" aria-current="page" href="/my_learning"><div class='side-menu__item__icon'>
<i class='material-icons'>event_note</i>
</div>
<div class='side-menu__item__label'>
My Learning
</div>
</a>
<a title="Help" target="_blank" class="side-menu__item js-navigation-button" href="//support.google.com/qwiklabs"><div class='side-menu__item__icon'>
<i class='material-icons'>help</i>
</div>
<div class='side-menu__item__label'>
Help
</div>
</a>
</nav>
<div class='side-menu__small-links js-small-links'>
<a href="/privacy_policy">Privacy</a>
<a href="/terms_of_service">Terms of Service</a>
</div>
</div>
</nav>

<main>
<div class='l-main-wrapper js-main'>
<span class='hidden' id='flash-sibling-before'></span>







<div class='alert alert-success'>
<p class='alert__message'>
Lab completed on Thu, 06 Dec 2018 12:53:14 -0500. Elapsed time: 99 minutes
</p>
<a class='alert__close' data-dismiss='alert'>
<i class='fa fas fa-times'></i>
</a>
<iframe class='l-ie-iframe-fix'></iframe>
</div>
<div class='l-lab-container js-lab_and_classroom_info' data-deployment='exitcertified' data-lab-name='Developing on AWS - Lab 7 - End to End Application' data-label='Developing on AWS - Lab 7 - End to End Application'></div>
<div class='l-lab-sidebar js-lab-sidebar-container'>
<div class='lab-sidebar js-lab-sidebar elevation-1'>
<div class='lab-sidebar__group text--small'>
19m setup
&middot;
180m access
&middot;
180m completion
</div>
<div class='lab-sidebar__group'>
<div class='rateit l-mrm' data-rateit-readonly='true' data-rateit-value='3.8667'></div>
<a class='small-label l-mrm' data-target='#lab-review-modal' data-toggle='modal'>
Rate Lab
</a>
<a class='small-label' data-target='#lab-details-modal' data-toggle='modal'>
Lab Details
</a>
</div>
<div class='lab-sidebar__group'>
<h5 class='l-mbs'>
Student Resources
</h5>
<ul class='list--custom-icons l-mbl'>
<li class='small-label'>
<i class='fa fas fas fa-file-text text--blue'></i>
<a target="_blank" href="/classrooms/1712/labs/11147?instruction=4201">lab7-java.md
<i class='fa fas fas fa-external-link'></i>
</a></li>
<li class='small-label'>
<i class='fa fas fas fa-file-text text--blue'></i>
<a target="_blank" href="/classrooms/1712/labs/11147?instruction=4202">lab7-python.md
<i class='fa fas fas fa-external-link'></i>
</a></li>
</ul>

</div>
<div class='lab-sidebar__group'>
<h5 class='l-mbs'>Connection Details</h5>
<div class='form-row js-form-row'>
<a class='button button--full-width button--secondary is-disabled js-connection-dns-link js-external-window' target='_blank'>
Open Console
</a>
</div>

<p class='caption l-mtm l-mbm'>
<b>Warning:</b> Do not transmit data into the AWS Console that is not related to Qwiklabs or the lab you are taking.
</p>
<div class='form-row js-form-row'>
<div class='control-group'>
<label class='label--console'>
Username 
</label>
<input class='input input--console js-connection-username-0' disabled='disabled' readonly='readonly' value='&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;'>
<button class='button button--copy button--copy-input js-copy-input-button' data-clipboard-target='.js-connection-username-0'>
<i class='fa fas fa-clipboard'></i>
</button>
</div>
</div>

<div class='form-row js-form-row'>
<div class='control-group'>
<label class='label--console'>
Password
</label>
<input class='input input--console js-connection-password' disabled='disabled' readonly='readonly' value='&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;'>
<button class='button button--copy button--copy-input js-copy-input-button' data-clipboard-target='.js-connection-password'>
<i class='fa fas fa-clipboard'></i>
</button>
</div>
</div>

<div class='form-row js-form-row'>
<div class='control-group'>
<label class='label--console'>
AWS Account 
</label>
<input class='input input--console js-connection-project-0' disabled='disabled' readonly='readonly' value='&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;'>
<button class='button button--copy button--copy-input js-copy-input-button' data-clipboard-target='.js-connection-project-0'>
<i class='fa fas fa-clipboard'></i>
</button>
</div>
</div>


<div class='form-row js-form-row'>
<div class='control-group'>
<label class='label--console'>
Access Key Id
</label>
<input class='input input--console js-connection-access-key-id' disabled='disabled' readonly='readonly' value='&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;'>
<button class='button button--copy button--copy-input js-copy-input-button' data-clipboard-target='.js-connection-access-key-id'>
<i class='fa fas fa-clipboard'></i>
</button>
</div>
</div>

<div class='form-row js-form-row'>
<div class='control-group'>
<label class='label--console'>
Secret Access Key
</label>
<input class='input input--console js-connection-secret-access-key' disabled='disabled' readonly='readonly' value='&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;'>
<button class='button button--copy button--copy-input js-copy-input-button' data-clipboard-target='.js-connection-secret-access-key'>
<i class='fa fas fa-clipboard'></i>
</button>
</div>
</div>


<div class='form-row js-form-row'>
<div class='control-group'>
<label class='label--console'>
Endpoint
</label>
<input class='input input--console js-connection-endpoint' disabled='disabled' readonly='readonly' value='&middot;&middot;&middot;&middot;&middot;&middot;&middot;&middot;'>
<button class='button button--copy button--copy-input js-copy-input-button' data-clipboard-target='.js-connection-endpoint'>
<i class='fa fas fa-clipboard'></i>
</button>
</div>
</div>

<div class='form-row'>
<div class='control-group'>
<label class='label--console'>
EC2 Key Pair Private Key:
</label>
<ul class='list--custom-icons list--custom-icons--reverse l-mts'>
<li class='small-label'>
<a class='link--console is-disabled js-connection-pem'>
Download PEM
</a>
<i class='fa fas fa-download text--blue'></i>
</li>
<li class='small-label'>
<a class='link--console is-disabled js-connection-ppk'>
Download PPK
</a>
<i class='fa fas fa-download text--blue'></i>
</li>
</ul>
</div>
</div>

<div class='lab-sidebar__resource lab-sidebar__resource--additional-details l-mtl is-hidden js-cf-connection-output'></div>
<div class='lab-sidebar__resource lab-sidebar__resource--additional-details l-mtl is-hidden js-additional-connection-info'></div>
</div>
</div>
</div>
<div class='l-lab-main-header'>
<header class='lab-header js-lab-header elevation-1'>
<div class='lab-header__section lab-header__section--flex'>
<div class='lab-header__progress is-hidden js-progress'>
<div class='lab-header__progress__bar js-progress-bar'></div>
</div>
</div>
<div class='lab-header__section lab-header__section--no-border lab-header-section-progress'>
<span class='lab-header__progress-message is-hidden js-progress-message'>
<div class='lab-header__progress-message__indicator js-progress-message-indicator'></div>
<span class='js-progress-message-incomplete'>
Lab Setting Up
</span>
<span class='js-progress-message-complete is-hidden'>
Lab Running
</span>
</span>
</div>
<div class='lab-header__section'>
<a class='button button--start button--lab js-start-lab-button' data-focus-id='11147' data-lab-access='none' data-lab-instance-id='' data-parent='classroom'>
Start Lab
</a>
<a class='button button--wait button--lab js-waiting-lab-button is-hidden'>
<i class='fa fa-spinner fa-pulse'></i>
</a>
<a class='button button--end button--lab js-end-lab-button is-hidden'>
End Lab
</a>
</div>
<div class='lab-header__section'>
<h3 class='text--sign js-timer' data-duration='10800'>
03:00:00
</h3>
</div>
</header>
</div>
<div class='l-lab-main-body'>
<div class='js-lab-content lab-content'>
<div class='alert alert--fake js-alert'>
<p class='alert__message js-alert-message'></p>
<a class='alert__close js-alert-close'>
<i class='fa fa-times'></i>
</a>
<iframe class='l-ie-iframe-fix'></iframe>
</div>
<div class='lab-content__markdown-wrapper'>
<div class='js-markdown-instructions lab-content__markdown markdown-lab-instructions no-select' id='markdown-lab-instructions'>

<h1>Java -  Developing an end to end Application with AWS</h1>

<p>In this lab, you will learn how to use the AWS SDK and several AWS services to build an end to end serverless web application instead of the little pieces you have been building in the previous labs.</p>

<p>The idea of this web application is to provide a way for users to create and manage text notes and play them back audibly in different accents and voices by using Amazon Polly. </p>

<p>The web app will have the following:</p>
<ul>
<li>A frontend based on Angular whose files will be hosted on a static website in S3.</li>
<li>A backend based on Cognito User Pools, API Gateway, Lambda, DynamoDB, and Polly.</li>
</ul>
<p>There is a need to develop one Lambda function as part of this lab and use four Lambda functions that have already been coded for you. Once you complete the lab and you still have time remaining, take the challenge by coding three of those four Lambda functions yourself. </p>

<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/lab-7-diagram.PNG" alt="Lab 6 Diagram"></p>

<p><strong>Objectives</strong></p>

<p>After completing this lab, you will be able to:</p>
<ul>
<li>Host a Static Website in an S3 bucket.</li>
<li>Create an IAM Policy and Role to give specific access to Lambda.</li>
<li>Create a Cognito User Pool to authenticate users and control access to API Gateway.</li>
<li>Create Lambda functions to perform CRUD operations on a DynamoDB table.</li>
<li>Create a Restful API on API Gateway to front Lambda functions.</li>
<li>Access the Polly service through API.</li>
</ul>
<p><strong>Prerequisites</strong></p>

<p>This lab requires:</p>
<ul>
<li>Access to a notebook computer with Wi-Fi running Microsoft Microsoft Windows or macOS.</li>
<li>An Internet browser such as Chrome, Firefox, or IE9+. (previous versions of Internet Explorer are not supported)</li>
<li>An SSH client, such as PuTTY, or a Microsoft Remote Desktop client to connect to your development EC2 instance.</li>
</ul>
<p><strong>Note</strong> You can use an iPad or tablet device to access these directions in Qwiklabs.  </p>

<p><strong>Duration</strong></p>

<p>This lab will require around <strong>2 hours</strong> to complete.</p>



<h2 id='step1'>Task 1: Connecting to Your Development Environment</h2>
<ol start="1">
<li>To launch your lab, to the right of the lab title click <strong>Start Lab</strong>.</li>
</ol>
<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/start.png" alt="Start Lab"></p>
<ol start="2">
<li><p>In the <strong>Connection Details</strong> section in Qwiklabs, copy the <strong>Password</strong> to the clipboard, and then, click <strong>Open Console</strong>.</p></li>
<li><p>Sign in to the AWS Management Console by using the following steps:    </p></li>
</ol><ul>
<li>For <strong>IAM user name</strong>, enter: <input readonly class="copyable-inline-input" size="10" type="text" value="awsstudent">
</li>
<li>For <strong>Password</strong>, paste the password from the clipboard.</li>
<li>Click <strong>Sign In</strong>.</li>
</ul>


<p><a id="config_cognito"></a></p>

<h2 id='step2'>Task 2: Cognito Authentication</h2>

<p>In this section, you will:</p>
<ul>
<li>Create a Cognito user pool, which you are going to use to authenticate your end users and control access through API Gateway, making sure that your endpoint is secure. </li>
<li>Create and confirm a Cognito user by using the command line. The Cognito user is used to test the end to end application.</li>
</ul>
<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/lab7-diagram1.PNG" alt="Lab 7 Diagram"></p>

<p>For more information on Cognito User Pools, see: <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html" target="_blank">Amazon Cognito User Pools</a></p>

<h3>Task 2.1: Creating a Cognito User Pool</h3>
<ol start="4">
<li>In the AWS Management Console, on the Services menu, click <strong>Cognito</strong>.</li>
</ol>
<p><strong>IMPORTANT</strong> Verify that you are in the <strong>correct region</strong>. If you are unsure of the region, verify the value with your instructor. Every service that is used in the lab (Cognito, API Gateway, Lambda, and DynamoDB) must be in the same region. Take a note of this region and every time the instructions prompt you to verify your region, make sure it is the same.</p>
<ol start="5">
<li>Click <strong>Manage User Pools</strong>.</li>
<li>Click <strong>Create a user pool</strong>.</li>
<li>For <strong>Pool name</strong>, enter: <input readonly class="copyable-inline-input" size="14" type="text" value="PollyNotesPool">
</li>
<li>For <strong>How do you want to create your user pool</strong>, click <strong>Step through settings</strong>.</li>
<li>Go to the <strong>Which standard attributes do you want to require</strong> section.</li>
<li>Remove the checkbox next to <strong>email</strong> and click <strong>Next step</strong>. This step is EXTREMELY important as it can't be modified once the User Pool is created.</li>
<li>In the <strong>What password strength do you want to require</strong> section, you set the specifics required for the password. The password used is for testing purposes and you will be entering it many times so it has limited security settings. In this section, make the following changes:</li>
</ol><ul>
<li>Set <strong>Minimum length</strong> to '6'. </li>
<li>Clear <strong>Require numbers</strong>.</li>
<li>Clear <strong>Require special character</strong>.</li>
<li>Clear <strong>Require uppercase letters</strong>.</li>
<li>Clear <strong>Require lowercase letters</strong>.</li>
</ul><ol start="12">
<li>Click <strong>Next step</strong>.</li>
<li>In the navigation menu on the left, you will find a list of all of the main steps for the creation of the Cognito User Pool. As many settings can stay as the defaults, you will skip ahead and go to the ones that need to be modified. Click <strong>App clients</strong>.</li>
<li>Click <strong>Add an app client</strong>. </li>
</ol>
<p><strong>IMPORTANT</strong> Make sure that you follow the next steps exactly as this configuration can't be undone and you will have to restart a portion of the lab.</p>
<ul>
<li>For <strong>App client name</strong> name, enter: <input readonly class="copyable-inline-input" size="17" type="text" value="PollyNotesAngular">
</li>
<li>Clear <strong>Generate client secret</strong>. This step is EXTREMELY important as it can't be modified once the App client is created.</li>
</ul>
<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/cognito-clearbox.PNG" alt="Cognito box"></p>
<ol start="15">
<li>Click <strong>Create app client</strong>.</li>
<li>In the navigation menu on the left, click <strong>Review</strong> and review all of the settings.</li>
<li>Click <strong>Create pool</strong>.</li>
<li><p>Save the Pool Id and the Pool ARN from your Cognito Pool information into a separate file for use later in this lab. Make sure to note that it is for Cognioto Pool Id and Cognito Pool ARN as well. For example, in the Oregon region, the Pool Id would look like <strong>us-west-2_XXXXXXXXX</strong> and the Pool ARN would look like <strong>arn:aws:cognito-idp:us-west-2:012345678901:userpool/us-west-2_XXXXXXXXX</strong>.</p></li>
<li><p>In the navigation pane on the left, under <strong>General settings</strong>, click <strong>App clients</strong>.</p></li>
<li><p>Save the App client id in the form of xxxxxxxxxxxxxxxxxxxxxxxxxx information into the same file. Make sure to note that it is for Cognioto App client id.</p></li>
</ol>
<h3>Task 2.2: Creating a User for the Cognito User Pool</h3>

<p>In this section, you will create and confirm a Cognito user by using the command line. The Cognito user is used to test the end to end application.</p>

<p><strong>Note</strong> For this task, you should be using Powershell from the Windows instance.</p>
<ol start="21">
<li>Establish a Connection to the <strong>Windows Dev Instance</strong>.</li>
</ol>
<p>For detailed directions, see: <a href="#connect_dev">Appendix 3: Connecting to Your Development Environment</a>.</p>

<p><a id="continueafterconnection"></a></p>
<ol start="22">
<li>To add a user to Cognito, open the Powershell application on the Windows Instance. It's available as a shortcut in the taskbar menu. From Powershell, you will run the sign-up script. </li>
</ol>
<p>First, you will need to change <strong>change-me_app-client-id</strong> with the value of the <strong>App client id</strong> that you copied to a file earlier. To change the value, enter the following command:</p>
<pre class="highlight plaintext"><code>aws cognito-idp sign-up --client-id change-me_app-client-id --username student --password student&#x000A;</code></pre>
<p>Here is an example of the command and the output. </p>
<pre class="highlight json"><code><span class="p">{</span><span class="w">&#x000A;    </span><span class="s2">"UserConfirmed"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">&#x000A;    </span><span class="s2">"UserSub"</span><span class="p">:</span><span class="w"> </span><span class="s2">"abc70c2f-52v7-4abc-c195-012abc8560ab"</span><span class="w">&#x000A;</span><span class="p">}</span><span class="w">&#x000A;</span></code></pre>
<p><strong>Note</strong> The values in the output should show your specific configuration.</p>

<p>You have now created a user in Cognito with the username <input readonly class="copyable-inline-input" size="7" type="text" value="student"> and a password of <input readonly class="copyable-inline-input" size="7" type="text" value="student">. Even though this isn't secure, you are using a simple username and password for simplicity during testing.</p>
<ol start="23">
<li>Next, confirm the user that you created. You will need to change <strong>change-me_pool-id</strong> with the value of the <strong>Pool Id</strong> that you copied to a file earlier. To confirm the user, enter the following command:</li>
</ol><pre class="highlight plaintext"><code>aws cognito-idp admin-confirm-sign-up --user-pool-id change-me_pool-id --username student&#x000A;</code></pre>
<p>If you don't see any output, it means that the command is successful and you can continue.</p>
<ol start="24">
<li>Go back to the AWS Management Console. Under <strong>General settings</strong>, click <strong>Users and groups</strong>.</li>
</ol>
<p>You should see the username student and the status is CONFIRMED. If you do not see it, refresh the browser.</p>

<p>Congratulations! You have successfully created a Cognito User Pool, manually added a user, and confirmed that user. Normally, the sign-up process would be done via the application. However, the application that you are using doesn't provide such a funtion. So instead, it is manually created.</p>



<h2 id='step3'>Task 3: Creating a DynamoDB table</h2>

<p>In this section, you will create a table in DynamoDB called <strong>pollynotes</strong>. This table is going to be used to store your user id, along with your notes.</p>

<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/lab-7-diagram2.PNG" alt="Lab 6 Diagram"></p>
<ol start="25">
<li>In the AWS Management Console, on the Services menu, click <strong>DynamoDB</strong> and click the <strong>Tables</strong> link on the navigation menu on the left side.</li>
</ol>
<p><strong>IMPORTANT</strong> Verify that you are in the <strong>correct region</strong> based on what you have noted before. If you are unsure of the region, verify the value with your instructor. Make sure your region name is consistent.</p>

<p><strong>IMPORTANT</strong> The entries below are case sensitive, make sure that you copy and paste the entries from Qwiklabs.</p>
<ol start="26">
<li>Click <strong>Create table</strong>.</li>
<li>For <strong>Table name</strong>, enter: <input readonly class="copyable-inline-input" size="10" type="text" value="pollynotes">
</li>
<li>For <strong>Primary key</strong>, enter: <input readonly class="copyable-inline-input" size="6" type="text" value="userId"> (String)</li>
<li>Select <strong>Add sort key</strong>.</li>
<li>For <strong>Add sort key</strong>, enter: <input readonly class="copyable-inline-input" size="6" type="text" value="noteId"> (String)</li>
</ol>
<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/create-table.PNG" alt="Create table"></p>
<ol start="31">
<li>Scroll down and click <strong>Create</strong>. It may take up to 15 seconds for the DynamoDB table to be created. There will be a spinning loading logo next to your table name. Wait for that to disappear before moving to the next step.</li>
<li>You should be placed on the pollynotes table pane. If not, click the <strong>pollynotes</strong> table.</li>
<li>Click the <strong>Items</strong> tab.</li>
<li>Click <strong>Create Item</strong>.</li>
<li>In the <strong>VALUE</strong> field next to <strong>userId</strong>, enter: <input readonly class="copyable-inline-input" size="8" type="text" value="testuser">
</li>
<li>In the <strong>VALUE</strong> field next to <strong>noteId</strong>, enter: <input readonly class="copyable-inline-input" size="3" type="text" value="001">
</li>
<li>Click the <strong>+</strong> icon to the left of <strong>noteId</strong>. Select <strong>Append</strong>, and then select <strong>String</strong>.</li>
<li>In the <strong>FIELD</strong>, field enter: <input readonly class="copyable-inline-input" size="4" type="text" value="note">
</li>
<li>In the <strong>VALUE</strong> field next to <strong>note</strong>, enter: <input readonly class="copyable-inline-input" size="17" type="text" value="My note to myself">
</li>
<li>Click <strong>Save</strong>.</li>
<li>Create a few more items by going through the Create Item process again. For example, your next <strong>noteId</strong> should be <input readonly class="copyable-inline-input" size="3" type="text" value="002">, then <input readonly class="copyable-inline-input" size="3" type="text" value="003">, and more. The <strong>userId</strong> should always be <input readonly class="copyable-inline-input" size="8" type="text" value="testuser">. The <strong>note</strong> can be anything that you would like, but beware that it will be recited back by Polly at some point.</li>
</ol>


<h2 id='step4'>Task 4: Creating S3 buckets</h2>

<p>In this section, you will create three S3 buckets:</p>
<ul>
<li>A website bucket which will host your front end website.</li>
<li>An MP3 bucket which will store your MP3 files.</li>
<li>A code bucket used to store your Lambda functions as they are uploaded from the AWS ToolKit in Eclipse.</li>
</ul>
<p>You will only be creating the S3 buckets in this section and configuring them in a later step.</p>

<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/lab-7-diagram3.PNG" alt="Lab 6 Diagram"></p>

<p><strong>Note</strong> The diagram does not show the Code bucket since it is used to store your Lambda functions only.</p>
<ol start="42">
<li>In the AWS Management Console, on the Services menu, click <strong>S3</strong>.</li>
</ol>
<p><strong>IMPORTANT</strong> You can see that the region is Global. This is because S3 does not require region selection. However, S3 creates buckets in a region you specify. When creating your buckets, select the correct region based on what you noted before. If you are unsure of the region, verify the value with your instructor.</p>

<h3>Task 4.1: Create the Web Bucket</h3>
<ol start="43">
<li>Click <strong>Create bucket</strong>.</li>
<li>For <strong>Bucket name</strong>, enter (all lowercase): <input readonly class="copyable-inline-input" size="38" type="text" value="polly-notes-web-&lt;firstname&gt;-&lt;lastname&gt;">
</li>
</ol>
<p><strong>Note</strong> For example, if your name is John Smith, your bucket name would be <strong>polly-notes-web-john-smith</strong>.</p>
<ol start="45">
<li>Make sure that the <strong>Region</strong> field is set to the appropriate region that you have noted earlier.</li>
<li>Click <strong>Create</strong>.</li>
</ol>
<h3>Task 4.2: Create the MP3 Bucket</h3>
<ol start="47">
<li>To create the MP3 bucket, click <strong>Create bucket</strong>.</li>
<li>For <strong>Bucket name</strong>, enter (all lowercase): <input readonly class="copyable-inline-input" size="38" type="text" value="polly-notes-mp3-&lt;firstname&gt;-&lt;lastname&gt;">
</li>
</ol>
<p><strong>Note</strong> For example, if your name is John Smith, your bucket name would be <strong>polly-notes-mp3-john-smith</strong>.</p>
<ol start="49">
<li>Make sure that the <strong>Region</strong> field is set to the appropriate region that you have noted earlier.</li>
<li>Click <strong>Create</strong>.</li>
</ol>
<h3>Task 4.3: Create the Code Bucket</h3>
<ol start="51">
<li>To create the Code bucket, click <strong>Create bucket</strong>.</li>
<li>For <strong>Bucket name</strong>, enter the following (all lowercase): <input readonly class="copyable-inline-input" size="39" type="text" value="polly-notes-code-&lt;firstname&gt;-&lt;lastname&gt;">
</li>
</ol>
<p><strong>Note</strong> For example, if your name is John Smith, your bucket name would be <strong>polly-notes-code-john-smith</strong>.</p>
<ol start="53">
<li>Make sure the <strong>Region</strong> field is set to the appropriate region that you have noted earlier.</li>
<li>Click <strong>Create</strong>.</li>
</ol>


<h2 id='step5'>Task 5: Creating an IAM Policy and Role</h2>

<p>In this section, you will create an IAM Policy and a Role to allow your Lambda functions to:</p>
<ul>
<li>Perform CRUD operations on DynamoDB.</li>
<li>Call the Polly API.</li>
<li>Perform the PUT operation on S3 for the MP3.</li>
<li>Log events to Cloudwatch.</li>
</ul>
<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/lab-7-diagram3b.PNG" alt="Lab 6 Diagram"></p>
<ol start="55">
<li>In the AWS Management Console, on the Services menu, click <strong>IAM</strong>.</li>
</ol>
<p><strong>IMPORTANT</strong> You can see that the region is Global. This is because IAM does not require region selection because it's a global service.</p>

<h3>Task 5.1: Creating an IAM Policy</h3>
<ol start="56">
<li>In the navigation pane, click <strong>Policies</strong>, and then click <strong>Create policy</strong>.</li>
<li>Click the <strong>JSON</strong> tab.</li>
<li>Copy and paste the below policy (make sure to replace the existing content):</li>
</ol><pre class="highlight plaintext"><code>{&#x000A;    "Version": "2012-10-17",&#x000A;    "Statement": [&#x000A;        {&#x000A;            "Effect": "Allow",&#x000A;             "Action": [&#x000A;                "dynamodb:DeleteItem",&#x000A;                "dynamodb:GetItem",&#x000A;                "dynamodb:PutItem",&#x000A;                "dynamodb:Query",&#x000A;                "dynamodb:UpdateItem",&#x000A;                "dynamodb:DescribeTable",&#x000A;                "polly:SynthesizeSpeech",&#x000A;                "s3:PutObject",&#x000A;                "s3:GetObject",&#x000A;                "logs:CreateLogGroup",&#x000A;                "logs:CreateLogStream",&#x000A;                "logs:PutLogEvents"&#x000A;            ],&#x000A;            "Resource": ["*"]&#x000A;        }&#x000A;    ]&#x000A;}&#x000A;</code></pre><ol start="59">
<li>Click <strong>Review policy</strong>.</li>
<li>For <strong>Name</strong>, enter: <input readonly class="copyable-inline-input" size="19" type="text" value="lambda_ddb_s3_polly">
</li>
<li>Click <strong>Create policy</strong>.</li>
</ol>
<h3>Task 5.2: Creating an IAM Role</h3>

<p>In this section, you will create an IAM Role called <strong>PollyNotesRole</strong> and attach the <strong>lambda_ddb_s3_polly</strong> policy. This Role will be used by the Lambda functions in the next sections. This IAM role allows you to delegate access with defined permissions in the above policy to trusted entities without having to hardcode your credentials in your code.</p>
<ol start="62">
<li>In the navigation pane, click <strong>Roles</strong>, and then click <strong>Create role</strong>.</li>
<li>Under <strong>Select type of trusted entity</strong>, click <strong>AWS service</strong>. </li>
<li>Go to the <strong>Choose the service that will use this role</strong> section. Click <strong>Lambda</strong>, and then, click <strong>Next: Permissions</strong>.</li>
<li>In the <strong>Search</strong> field, enter: <input readonly class="copyable-inline-input" size="19" type="text" value="lambda_ddb_s3_polly">
</li>
<li>Select the <strong>lambda_ddb_s3_polly</strong> policy and click <strong>Next: Review</strong>.</li>
</ol>
<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/iam-polly.PNG" alt="IAM Polly"></p>
<ol start="67">
<li>For <strong>Role name</strong>, enter: <input readonly class="copyable-inline-input" size="14" type="text" value="PollyNotesRole">
</li>
<li>Click <strong>Create role</strong>.</li>
</ol>


<h2 id='step6'>Task 6: Creating the Lambda ListFunction</h2>

<p>In this section, you will create your Lambda List function. To do this, you edit the the <em>ListFunction.java</em> file. </p>

<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/lab-7-diagram4.PNG" alt="Lab 6 Diagram"></p>

<h3>Task 6.1: Getting to the ListFunction code</h3>
<ol start="69">
<li><p>Go back to the <strong>Windows Dev Instance</strong>.</p></li>
<li><p>Open Eclipse from the Desktop. Once Eclipse finishes loading, your workspace should already contain the <strong>PollyNotes</strong> project.</p></li>
<li><p>In the <strong>Anonymous Collection of Analytics for using the AWS Toolkit</strong> dialog box, click <strong>Finish</strong>.</p></li>
<li><p><strong>Right-click</strong> the project name <strong>PollyNotes</strong>, select <strong>Maven</strong>, click <strong>Update Project...</strong>, and click <strong>OK</strong> in the next window. To keep the project small, the dependencies haven't been downloaded yet so you need to do this task to rebuild the project and all its dependencies as a first step.</p></li>
<li><p>The PollyNotes project contains a few packages that are worth understanding for coding your ListFunction:</p></li>
</ol><ul>
<li>You will be editing the <em>ListFunction.java</em> file. In the Project Explorer, expand: <input readonly class="copyable-inline-input" size="63" type="text" value="PollyNotes &gt; src/main/java &gt; com.amazonaws.pollynotes.functions"> and you will find the <em>ListFunction.java</em> file there. This is the file that you will do all of your development in.</li>
<li>Under <input readonly class="copyable-inline-input" size="26" type="text" value="PollyNotes &gt; src/main/java">, the <strong>com.amazonaws.pollynotes.pojo</strong> package contains POJO classes that are used to receive the data in the handler for Lambda. The Note will also be used to use the Object Persistence Model for DynamoDB so you can do simple operations on the Note POJO which already contains Java Annotations mapping each attributes to the object. It is worth taking a look at it to understand what was done.</li>
<li>Under <input readonly class="copyable-inline-input" size="26" type="text" value="PollyNotes &gt; src/main/java">, the <strong>com.amazonaws.pollynotes.solution</strong> package contains the Solution files to all of the four functions you will be creating. Note that the DictateFunction is already built hence why it doesn't have a solution. You can refer to the solution if you get stuck. Although the code of those functions looks fairly long, it is only due to the amount of logging done in the function. The actual code is only a few lines.</li>
<li>Under <input readonly class="copyable-inline-input" size="26" type="text" value="PollyNotes &gt; src/test/java">, the <strong>com.amazonaws.pollynotes</strong> package contains JUnit test cases that you can use to validate that the functions you create works. This will help you test your functions locally without having to upload them to Lambda.</li>
</ul>
<h3>Task 6.2: Coding the ListFunction</h3>
<ol start="74">
<li>It is now time for you to code! You will need to edit the <em>ListFunction.java</em>. If you would rather not code and just use the Solution file, skip to <a href="#task63link">Task 6.3: Upload Your ListFunction to Lambda</a>.</li>
</ol>
<p>Your goal is to develop a Lambda function that will receive a userId as an input and return a list of Note objects. </p>

<p>Java is a strong type language which means that receiving JSON isn't as easy to parse as some other languages. Instead, Lambda and Java work together to deserialize the JSON payload into an object.</p>

<p>The input from Lambda will look similar to the following:</p>
<pre class="highlight json"><code><span class="p">{</span><span class="w">&#x000A;    </span><span class="s2">"userId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"testuser"</span><span class="w">&#x000A;</span><span class="p">}</span><span class="w">&#x000A;</span></code></pre><ul>
<li>It may look difficult to parse at first glance, however the Lambda Java core will do the work for you by serializing this JSON into a Note object that will have its userId property set and that you receive as an argument to your Lambda function as you can see in the function you need to develop below.</li>
</ul><pre class="highlight java"><code><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Note</span><span class="o">&gt;</span> <span class="nf">handleRequest</span><span class="o">(</span><span class="n">Note</span> <span class="n">note</span><span class="o">,</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">...</span>&#x000A;</code></pre><ul>
<li>The output that Lambda is an array of Note that should be similar to the following. This may sound like a challenge to return this kind of data. However, by returning a <input readonly class="copyable-inline-input" size="10" type="text" value="List&lt;Note&gt;">, the Lambda Java core will serialize the list of Note and output the above JSON data.</li>
</ul><pre class="highlight json"><code><span class="p">[</span><span class="w">&#x000A;    </span><span class="p">{</span><span class="w">&#x000A;        </span><span class="s2">"userId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"testuser"</span><span class="p">,</span><span class="w">&#x000A;        </span><span class="s2">"noteId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"001"</span><span class="p">,</span><span class="w">&#x000A;        </span><span class="s2">"note"</span><span class="p">:</span><span class="w"> </span><span class="s2">"My note to myself"</span><span class="w">&#x000A;    </span><span class="p">},</span><span class="w">&#x000A;    </span><span class="p">{</span><span class="w">&#x000A;        </span><span class="s2">"userId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"testuser"</span><span class="p">,</span><span class="w">&#x000A;        </span><span class="s2">"noteId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"002"</span><span class="p">,</span><span class="w">&#x000A;        </span><span class="s2">"note"</span><span class="p">:</span><span class="w"> </span><span class="s2">"My new note to myself"</span><span class="w">&#x000A;    </span><span class="p">}</span><span class="w">&#x000A;</span><span class="p">]</span><span class="w">&#x000A;</span></code></pre><ul>
<li>
<p>There are comments in the code to give you some help. However, it is your responsibility to make good use of those comments or to do it on your own. There are many ways to Query DynamoDB and the Solution Code makes use of the Object Persistence Model that was discussed in the class. You should take a look at the following:</p>
<ul>
<li>
<a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBMapper.QueryScanExample.html" target="_blank">Query and Scan</a> </li>
<li>
<a href="https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/dynamodbv2/datamodeling/AbstractDynamoDBMapper.html#query-java.lang.Class-com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression-com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig-" target="_blank">Query</a> </li>
</ul>
</li>
<li><p>Overall, the work you have to do is to query DynamoDB to find all of the notes of the userId based on the <strong>note</strong> argument and return a <input readonly class="copyable-inline-input" size="10" type="text" value="List&lt;Note&gt;"> based on the response of your query. Good luck and remember that there is always a Solution file that can help you out! Once you think you have something working or would like to test things out, follow the next steps.</p></li>
</ul><ol start="75">
<li>To test your code locally instead of having to upload your code to Lambda and invoke it from there, you will run a JUnit test. This will simulate a call to your Lambda handler with the userId <input readonly class="copyable-inline-input" size="8" type="text" value="testuser">. Even though this test runs locally, it's only your Lambda function that runs locally, your code is making an actual call to DynamoDB. </li>
</ol>
<p>To test, complete the following steps:</p>
<ul>
<li><p>Open the file <strong>ListFunctionTest.java</strong> located in the <input readonly class="copyable-inline-input" size="40" type="text" value="src/test/java &gt; com.amazonaws.pollynotes"> package. </p></li>
<li><p>Inspect the code of the test, which will make you realize that you are making a call to the CreateUpdateFunctionSolution function. Since this is a ListFunction, you need to make sure that there is data in the DynamoDB table. First thing to do is to create an item. Then, execute your freshly coded ListFunction and make sure that the <input readonly class="copyable-inline-input" size="10" type="text" value="List&lt;Note&gt;"> that is returned isn't empty.</p></li>
<li><p>Execute the test. <strong>Right-click</strong> the <strong>ListFunctionTest.java</strong> file, select <strong>Debug As</strong>, and <strong>JUnit Test</strong>.</p></li>
<li><p>You should see the output of the <em>CreateUpdateFunctionSolution</em> and then the beginning of your function in the <strong>Console</strong> View. If the Test successfully completes, the <strong>JUnit</strong> view should be all green. You can continue troubleshooting by using breakpoints and running the prior step again.</p></li>
</ul><pre class="highlight plaintext"><code>Initiating PollyNotes-CreateUpdateFunction...&#x000A;Note received: {userId: "testuser", noteId: "001", note: "This is a test"}&#x000A;Returning noteId: "001"&#x000A;Initiating PollyNotes-ListFunction...&#x000A;</code></pre>
<p><a id="task63link"></a></p>

<h3>Task 6.3: Upload Your ListFunction to Lambda</h3>

<p>In this section, you upload your Lambda function to Lambda. To do so, you will use the AWS ToolKit that has been installed in Eclipse. This simplifies the process instead of having to use the command line. What is done in the background is for you is to create a ZIP of your code, uploading it to your code S3 bucket, creating the Lambda function by using the ZIP, and associating the IAM Role you created earlier.</p>
<ol start="76">
<li>In the Project Explorer, <strong>right-click</strong> the folder <input readonly class="copyable-inline-input" size="13" type="text" value="src/main/java"> and select <strong>Amazon Web Services &gt;&gt; Upload function to AWS Lambda...</strong>
</li>
<li>For <strong>Select the Handler</strong>, complete one of the following:</li>
</ol><ul>
<li>If you have coded your function, select <input readonly class="copyable-inline-input" size="47" type="text" value="com.amazonaws.pollynotes.functions.ListFunction">.</li>
<li>If you want to use the Solution Code, select <input readonly class="copyable-inline-input" size="54" type="text" value="com.amazonaws.pollynotes.solution.ListFunctionSolution">.</li>
</ul><ol start="78">
<li>For <strong>Select the AWS Region</strong>, select the region for your lab as you noted it before.</li>
<li>Select <strong>Create a new Lambda function</strong> and replace the value of the field next to it (containing MyFunction) with <input readonly class="copyable-inline-input" size="23" type="text" value="PollyNotes-ListFunction">.</li>
<li>Click <strong>Next</strong>
</li>
<li>For <strong>IAM Role</strong>, select <input readonly class="copyable-inline-input" size="14" type="text" value="PollyNotesRole">.</li>
<li>For <strong>S3 Bucket</strong>, select your code S3 Bucket: <input readonly class="copyable-inline-input" size="39" type="text" value="polly-notes-code-&lt;firstname&gt;-&lt;lastname&gt;">
</li>
<li>In the <strong>Memory (MB)</strong> field, replace the content with <strong>1024</strong> so that your Lambda function can start faster on the first load.</li>
<li>Click <strong>Finish</strong>
</li>
</ol>
<p>You have now uploaded your Lambda function!</p>
<ol start="85">
<li>The next step is to test the Lambda function from the Lambda UI. In the AWS Management Console, on the Services menu, click <strong>Lambda</strong>.</li>
<li>Click <strong>PollyNotes-ListFunction</strong>. If you don't see your function, make sure you are in the correct Region.</li>
<li>Click <strong>Test</strong>.</li>
<li>For <strong>Event name</strong>, enter: <input readonly class="copyable-inline-input" size="8" type="text" value="ListTest">
</li>
<li>Replace the JSON payload with the following. </li>
</ol><pre class="highlight json"><code><span class="p">{</span><span class="w">&#x000A;    </span><span class="s2">"userId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"testuser"</span><span class="w">&#x000A;</span><span class="p">}</span><span class="w">&#x000A;</span></code></pre>
<p>It should look very familiar as we are yet again testing to get the list of items.</p>
<ol start="90">
<li>Click <strong>Create</strong>.</li>
<li>Click <strong>Test</strong>. It is normal for it to take a little longer as this is the first time you are running your Lambda function.</li>
<li>On the left, there should be a green checkmark just under the name of your Lambda function name with the message <em>Execution result: succeeded (logs)</em>. Click <strong>Details</strong> and you should see the output of your Lambda function listing a few notes that you have created in the DynamoDB section. For example:</li>
</ol><pre class="highlight json"><code><span class="p">[</span><span class="w">&#x000A;    </span><span class="p">{</span><span class="w">&#x000A;        </span><span class="s2">"userId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"testuser"</span><span class="p">,</span><span class="w">&#x000A;        </span><span class="s2">"noteId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"001"</span><span class="p">,</span><span class="w">&#x000A;        </span><span class="s2">"note"</span><span class="p">:</span><span class="w"> </span><span class="s2">"My note to myself"</span><span class="w">&#x000A;    </span><span class="p">},</span><span class="w">&#x000A;    </span><span class="p">{</span><span class="w">&#x000A;        </span><span class="s2">"userId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"testuser"</span><span class="p">,</span><span class="w">&#x000A;        </span><span class="s2">"noteId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"002"</span><span class="p">,</span><span class="w">&#x000A;        </span><span class="s2">"note"</span><span class="p">:</span><span class="w"> </span><span class="s2">"My new note to myself"</span><span class="w">&#x000A;    </span><span class="p">}</span><span class="w">&#x000A;</span><span class="p">]</span><span class="w">&#x000A;</span></code></pre>
<p>Congratulations! You have just created the List Lambda function that will act as your backend when a user will need to list their notes.</p>



<h2 id='step7'>Task 7: Creating the API Gateway</h2>

<p>In this section, you will create a Restful API to front the back-end Lambda function. The API will use Cognito identities for authentication. For the application, you will be using the AWS API Gateway Service.</p>

<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/lab-7-diagram5a.PNG" alt="Lab 6 Diagram"></p>
<ol start="93">
<li>In the AWS Management Console, on the Services menu, click <strong>API Gateway</strong>.</li>
</ol>
<p><strong>IMPORTANT</strong> Verify that you are in the <strong>correct region</strong> based on what you have noted before. If you are unsure of the region, verify the value with your instructor. Make sure your region name is consistent.</p>
<ol start="94">
<li>Click <strong>Get Started</strong>.</li>
<li>In the <strong>Create Example API</strong> dialog box, click <strong>OK</strong>.</li>
<li>Under <strong>Create new API</strong>, select <strong>New API</strong>.</li>
<li>Enter the following formation:
<ul>
<li>For <strong>API name</strong>, enter: <input readonly class="copyable-inline-input" size="13" type="text" value="PollyNotesAPI">
</li>
<li>For <strong>Description</strong>, enter: <input readonly class="copyable-inline-input" size="13" type="text" value="PollyNotesAPI"> </li>
<li>For <strong>Endpoint Type</strong>, select <strong>Regional</strong>.</li>
</ul>
</li>
<li>Click <strong>Create API</strong>.</li>
</ol>
<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/create-api1.PNG" alt="Cognito Review Defaults"></p>

<h3>Task 7.1: Creating the Cognito Authorizer</h3>

<p>In this section, you create the Cognito Authorizer. The Authorizer will allow you to control access to the API with the Cognito User Pool. </p>
<ol start="99">
<li>In the left navigation menu, click <strong>Authorizers</strong>.</li>
<li>Click <strong>Create New Authorizer</strong>.</li>
<li>
<p>Enter the following information:</p>
<ul>
<li>For <strong>Name</strong>, enter: <input readonly class="copyable-inline-input" size="14" type="text" value="PollyNotesPool">
</li>
<li>For <strong>Type</strong>, select <strong>Cognito</strong>.</li>
<li>For <strong>Cognito User Pool</strong>, select <strong>PollyNotesPool</strong>.</li>
<li>For <strong>Token Source</strong>: <input readonly class="copyable-inline-input" size="13" type="text" value="Authorization">
</li>
<li>Leave <strong>Token Validation</strong> empty.</li>
</ul>
</li>
<li><p>Click <strong>Create</strong>.</p></li>
</ol>
<h3>Task 7.2: Creating the Resources</h3>

<p>In this section, you create your API Resources.</p>

<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/lab-7-diagram5a.PNG" alt="Lab 6 Diagram"></p>
<ol start="103">
<li>In the navigation pane, click <strong>Resources</strong>.</li>
<li>Under <strong>Resources</strong>, select the root <strong>/</strong>.</li>
</ol>
<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/api-root.PNG" alt="Cognito Review Defaults"></p>
<ol start="105">
<li>Click <strong>Actions</strong>, and then select <strong>Create Resource</strong>.</li>
<li>Under <strong>Resource Name</strong>, enter the following (the Resource path will populate automatically): <input readonly class="copyable-inline-input" size="5" type="text" value="notes">
</li>
<li>Click <strong>Create Resource</strong>.</li>
</ol>
<p>Now that you have created your resource, you need to create your Methods.  </p>

<h3>Task 7.3: Creating the API GET Method</h3>
<ol start="108">
<li>Click the Resources link and select <strong>/notes</strong>.</li>
<li>Click <strong>Actions</strong>, and then, select <strong>Create Method</strong>.</li>
<li>Select <strong>GET</strong> and then click the checkmark tick.</li>
</ol>
<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/tick.PNG" alt="Tick"></p>
<ol start="111">
<li>For <strong>Integration type</strong>, select <strong>Lambda Function</strong>.</li>
<li>Under <strong>Lambda Function</strong>, type an uppercase 'P', then select your Lambda <strong>PollyNotes-ListFunction</strong>.</li>
<li>Click <strong>Save</strong>.</li>
<li><p>In the <strong>Add Permission to Lambda Function</strong> dialog box, click <strong>OK</strong>.</p></li>
<li><p>Click <strong>Method Request</strong>.</p></li>
<li><p>In the <em>Settings</em> section, next to Authorization, click <strong>Edit</strong> (pencil icon). Select <strong>PollyNotesPool</strong> and then, click the checkmark tick.</p></li>
<li><p>In the breadcrumb, click <strong>Method Execution</strong>.</p></li>
<li><p>Click <strong>Integration Request</strong>.</p></li>
<li><p>Scroll down to and expand the <strong>Mapping Templates</strong> section. Select <strong>When there are no templates defined (recommended)</strong>.</p></li>
<li><p>Under <strong>Content-Type</strong>, click <strong>Add mapping template</strong>.</p></li>
<li><p>Enter <input readonly class="copyable-inline-input" size="16" type="text" value="application/json"> and click the checkmark tick.</p></li>
<li><p>In the box that appeared, enter the following:</p></li>
</ol><pre class="highlight json"><code><span class="p">{</span><span class="w">&#x000A;    </span><span class="s2">"userId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"testuser"</span><span class="w">&#x000A;</span><span class="p">}</span><span class="w">&#x000A;</span></code></pre>
<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/jsonexample1.PNG" alt="jsonexample"></p>

<p><strong>Note</strong> You are hardcoding the value of <em>userId</em> here so that when you do your first test from the web interface, you can see the original notes you have created in DynamoDB. Since you won't be creating the CreateUpdate Function until after doing your test, you would have no way to create a note for your user. The first step once you are done fully testing the List function, will be to change this mapping template to be dynamic based on the Cognito ID of the user login in.</p>
<ol start="123">
<li><p>Click <strong>Save</strong>.</p></li>
<li><p>Click the <strong>/notes</strong> resource.</p></li>
<li><p>Click <strong>Actions</strong> and select <strong>Enable CORS</strong>.</p></li>
<li><p>Click <strong>Enable CORS and replace existing CORS headers</strong>.</p></li>
<li><p>In the <strong>Confirm method changes</strong> dialog box, click <strong>Yes, replace existing values</strong>.</p></li>
<li>
<p>Click <strong>Actions</strong>, then select <strong>Deploy API</strong>. Make the following changes:</p>
<ul>
<li>For <strong>Deployment stage</strong>, select <strong>[New Stage]</strong>.</li>
<li>For <strong>Stage name</strong>,  enter: <input readonly class="copyable-inline-input" size="4" type="text" value="prod"> </li>
</ul>
</li>
<li>
<p>Click <strong>Deploy</strong>.</p>

<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/deploy-api.PNG" alt="Cognito Review Defaults"></p>
</li>
<li><p>Copy the <strong>Invoke URL</strong> and paste it into a file. You will need it later in the lab.</p></li>
<li>
<p>In the prod Stage Editor, click the <strong>Logs</strong> tab and make the following changes:</p>
<ul>
<li>Under Cloudwatch Settings, select <strong>Enable CloudWatch Logs</strong>.</li>
<li>For <strong>Log level</strong>, select <strong>INFO</strong>.</li>
<li>Select <strong>Log full requests/responses data</strong>.</li>
</ul>
</li>
<li><p>Click <strong>Save Changes</strong>.</p></li>
</ol>


<h2 id='step8'>Task 8: Creating the Front-End Website</h2>

<p>In this task, you create the front-end website.</p>
<ol start="133">
<li>Download and extract the following zip file: </li>
</ol>
<p><strong>Source file:</strong> <a href="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/polly-notes-web-bucket-root.zip" target="_blank">ZIP File</a></p>
<ol start="134">
<li>Modify the <em>main.bundle.js</em> file (lines 2-4) and change the following values:</li>
</ol><pre class="highlight javascript"><code><span class="c1">// Change the following 3 variable's value</span>&#x000A;<span class="kd">var</span> <span class="nx">API_GATEWAY_INVOKE_URL</span> <span class="o">=</span> <span class="s2">"https://your-api-url"</span>&#x000A;<span class="kd">var</span> <span class="nx">COGNITO_POOL_ID</span> <span class="o">=</span> <span class="s1">'us-east-1-xxxxxxxxxxx'</span>&#x000A;<span class="kd">var</span> <span class="nx">COGNITO_APP_CLIENT_ID</span> <span class="o">=</span> <span class="s1">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>&#x000A;</code></pre>
<p>You should have noted the needed values from prior lab steps. If you do not have details, you can get them by using the Console and the following paths:</p>
<ul>
<li><strong>Services -&gt; API Gateway -&gt; PollyNotesAPI -&gt; Stages -&gt; prod (API Gateway Invoke URL)</strong></li>
<li><strong>Services -&gt; Cognito -&gt; Manage User Pools -&gt; PollyNotesPool (Cognito Pool ID)</strong></li>
<li><strong>Services -&gt; Cognito -&gt; Manage User Pools -&gt; PollyNotesPool -&gt; App clients (Cognito App client ID)</strong></li>
</ul><ol start="135">
<li><p>Next, you need to enable CORS on the MP3 Bucket. When users access your website, they will be loading the website from the static Website bucket. Then, they will use javascript in their browser to connect to two different endpoints; API Gateway and the MP3 bucket. You already enabled CORS on the API Gateway, but you now need to enable CORS on your MP3 bucket, so that it can set response headers.</p></li>
<li><p>In the AWS Management Console, on the Services menu, click <strong>S3</strong>.</p></li>
<li><p>Click your <input readonly class="copyable-inline-input" size="38" type="text" value="polly-notes-mp3-&lt;firstname&gt;-&lt;lastname&gt;"> bucket.</p></li>
<li><p>Click the <strong>Permissions</strong> tab.</p></li>
<li><p>Click <strong>CORS configuration</strong>.</p></li>
<li><p>Enter the following configuration:</p></li>
</ol><pre class="highlight xml"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>&#x000A;<span class="nt">&lt;CORSConfiguration</span> <span class="na">xmlns=</span><span class="s">"http://s3.amazonaws.com/doc/2006-03-01/"</span><span class="nt">&gt;</span>&#x000A;<span class="nt">&lt;CORSRule&gt;</span>&#x000A;    <span class="nt">&lt;AllowedOrigin&gt;</span>*<span class="nt">&lt;/AllowedOrigin&gt;</span>&#x000A;    <span class="nt">&lt;AllowedMethod&gt;</span>GET<span class="nt">&lt;/AllowedMethod&gt;</span>&#x000A;    <span class="nt">&lt;AllowedHeader&gt;</span>*<span class="nt">&lt;/AllowedHeader&gt;</span>&#x000A;<span class="nt">&lt;/CORSRule&gt;</span>&#x000A;<span class="nt">&lt;/CORSConfiguration&gt;</span>&#x000A;</code></pre><ol start="141">
<li><p>Click <strong>Save</strong>.</p></li>
<li><p>Next, go to your Website bucket. In the breadcrumb trail, click <strong>Amazon S3</strong>, and then, click your <input readonly class="copyable-inline-input" size="38" type="text" value="polly-notes-web-&lt;firstname&gt;-&lt;lastname&gt;"> bucket.</p></li>
<li><p>Click <strong>Upload</strong>.</p></li>
<li><p>Upload all the files and folders by dragging them onto the upload window. Then, click <strong>Upload</strong>. There should be a total of 10 files and folders in the S3 Bucket Console.</p></li>
<li><p>Click the <strong>Permissions</strong> tab.</p></li>
<li><p>Click <strong>Bucket Policy</strong>.</p></li>
<li><p>Enter the following bucket policy and ensure that you replace your bucket name:</p></li>
</ol><pre class="highlight json"><code><span class="p">{</span><span class="w">&#x000A;    </span><span class="s2">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">&#x000A;    </span><span class="s2">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">&#x000A;        </span><span class="p">{</span><span class="w">&#x000A;            </span><span class="s2">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PublicReadGetObject"</span><span class="p">,</span><span class="w">&#x000A;            </span><span class="s2">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">&#x000A;            </span><span class="s2">"Principal"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">&#x000A;            </span><span class="s2">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"s3:GetObject"</span><span class="p">,</span><span class="w">&#x000A;            </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:s3:::polly-notes-web-&lt;firstname&gt;-&lt;lastname&gt;/*"</span><span class="w">&#x000A;        </span><span class="p">}</span><span class="w">&#x000A;    </span><span class="p">]</span><span class="w">&#x000A;</span><span class="p">}</span><span class="w">&#x000A;</span></code></pre><ol start="148">
<li>Click <strong>Save</strong>. Your bucket should now be flagged as <em>Public access</em>.</li>
<li>Click the <strong>Properties</strong> tab.</li>
<li>Click <strong>Static website hosting</strong>.</li>
<li>Enable static website hosting by entering the following:</li>
</ol><ul>
<li>Select <strong>Use this bucket to host a website</strong>.</li>
<li>For <strong>Index Document</strong>, enter <input readonly class="copyable-inline-input" size="10" type="text" value="index.html">
</li>
<li>Note your Endpoint URL into a file. You will use this again in the lab.</li>
</ul><ol start="152">
<li>Click <strong>Save</strong>.</li>
</ol>


<h2 id='step9'>Task 9: Testing the Web Application</h2>

<p>In this task, you test the web application by loading your S3 Hosted URL.</p>

<p><strong>NOTE</strong> You can obtain your S3 Hosted URL by going into the S3 Console. Select your web hosting bucket. Click the <strong>Properties</strong> tab, and then click, <strong>Static website hosting</strong>.</p>
<ol start="153">
<li>In a browser, enter your Static website hosting URL. You should be presented with a login page.</li>
</ol>
<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/pollynotes-loginpage.png" alt="Polly Notes Login Page"></p>
<ol start="154">
<li>Login with the following:</li>
</ol><ul>
<li>For <strong>UserName</strong>, enter: <input readonly class="copyable-inline-input" size="7" type="text" value="student">
</li>
<li>For <strong>Password</strong>, enter: <input readonly class="copyable-inline-input" size="7" type="text" value="student">
</li>
</ul><ol start="155">
<li>You should be presented with a page that looks like the following:</li>
</ol>
<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/pollynotes-homepage.png" alt="Polly Notes Login Page"></p>

<p>You should expect to see <strong>at least one</strong> test note returned. All other fuctionality, such as adding notes, updating, deleting, or playing will not work. You need to create the API methods and Lambda functions to enable this functionality.</p>



<h2 id='step10'>Task 10: Creating the Remaining Lambda Functions</h2>

<p>Now that the ListFunction is working end-to-end, you need to create the rest of the application. Having a list of the notes is great, but if you can't Create, Update, Delete and Dictate, the application isn't doing much.</p>

<p>You have two options for the remaining Lambda functions:</p>
<ul>
<li>Take it easy on me! Use the Solution Code to create the rest of the Lambda functions. </li>
<li>Take the challenge! If you have time, create the other Lambda functions manually that interact with DynamoDB (CreateUpdate, Search, and Delete). It is considered a challenge to complete this given the time provided for the lab.</li>
</ul>
<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/lab-7-diagram6.PNG" alt="Lab 6 Diagram"></p>

<p>If you decide to take the challenge, the recommendation is to start by using the Solution Code and then go back to replace the functions with your own code to ensure you get to see the full application before spending more time coding. </p>
<ol start="156">
<li>The first step is to download a zip file that contains the Solution Code for all of the Lambda functions. Instead of having you download a different zip file for each, you will be re-using this zip file for all of them. </li>
</ol>
<p>Download the following ZIP file to your laptop: <a href="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/PollyNotes-JavaSolutionFunctions.zip" target="_blank">PollyNotes-JavaSolutionFunctions</a>.</p>

<h3>Task 10.1: Creating the Lambda DictateFunction</h3>

<p>In this section, you work with the Lambda DictateFunction. This function is already completely coded for you due to the length of this lab. This is why you will not find Solution Code for Dictate.</p>
<ol start="157">
<li>In the AWS Management Console, on the Services menu, click <strong>Lambda</strong>.</li>
<li>Click <strong>Create function</strong> and make the following changes:
<ul>
<li>In the <strong>Name</strong> field, enter: <input readonly class="copyable-inline-input" size="26" type="text" value="PollyNotes-DictateFunction">
</li>
<li>For <strong>Runtime</strong>, select <strong>Java 8</strong>.</li>
<li>For <strong>Existing role</strong>, select <strong>PollyNotesRole</strong>.</li>
</ul>
</li>
<li>Click <strong>Create function</strong>.</li>
<li>
<p>In the <strong>Function code</strong> section, click <strong>Upload</strong>, and select the <em>PollyNotes-JavaSolutionFunctions</em> ZIP file that you downloaded in the previous section.</p>
<ul>
<li>For <strong>Handler</strong>, enter: <input readonly class="copyable-inline-input" size="50" type="text" value="com.amazonaws.pollynotes.functions.DictateFunction">
</li>
</ul>
</li>
<li><p>In the <strong>Environment variables</strong> section (pay attention not to enter the data in the Tags section), make the following changes:</p></li>
</ol><ul>
<li>In the <strong>Key</strong> field, enter: <input readonly class="copyable-inline-input" size="15" type="text" value="MP3_BUCKET_NAME">
</li>
<li>In the <strong>Value</strong> field, enter the name of your MP3 bucket which would look like <input readonly class="copyable-inline-input" size="38" type="text" value="polly-notes-mp3-&lt;firstname&gt;-&lt;lastname&gt;">.</li>
</ul><ol start="162">
<li>In the <strong>Basic settings</strong> section, move the slider of <strong>Memory (MB)</strong> from 512MB to <strong>1024MB</strong> so that your Lambda function can start faster on the first load.</li>
<li><p>Click <strong>Save</strong>.</p></li>
<li><p>Now test the Solution Code. Click <strong>Test</strong>.</p></li>
<li><p>In the <strong>Event name</strong> field, enter: <input readonly class="copyable-inline-input" size="11" type="text" value="DictateTest"></p></li>
<li><p>Replace the JSON payload with the following:</p></li>
</ol><pre class="highlight json"><code><span class="p">{</span><span class="w">&#x000A;    </span><span class="s2">"voiceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Russell"</span><span class="p">,</span><span class="w">&#x000A;    </span><span class="s2">"note"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">&#x000A;        </span><span class="s2">"userId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"testuser"</span><span class="p">,</span><span class="w">&#x000A;        </span><span class="s2">"noteId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"001"</span><span class="w">&#x000A;    </span><span class="p">}</span><span class="w">&#x000A;</span><span class="p">}</span><span class="w">&#x000A;</span></code></pre><ol start="167">
<li>Click <strong>Create</strong>.</li>
<li>Click <strong>Test</strong>. It is normal for it to take a little longer as this is the first time you are running your Lambda function.</li>
</ol>
<p>There should be a green checkmark just under the name of your Lambda function name on the left indicating <em>Execution result: succeeded (logs)</em>. </p>
<ol start="169">
<li>Click the <strong>Details</strong> link under that text. You should see the output of your Lambda function providing a very long URL to your MP3 bucket which represents a pre-signed URL. For example:</li>
</ol><pre class="highlight plaintext"><code>"https://polly-notes-mp3-&lt;firstname&gt;-&lt;lastname&gt;.s3.amazonaws.com/testuser/001.mp3?X-Amz-Security-Token=..."&#x000A;</code></pre><ol start="170">
<li>Copy and paste that URL in your browser to listen to Russell dictating your note!</li>
</ol>
<p>Congratulations! You have now created your Lambda Dictate function.</p>

<h3>Task 10.2: Creating the Lambda CreateUpdateFunction</h3>

<p>If you would prefer to code this function, you can follow the <a href="#manuallambda">Developing Lambda Functions Manually</a> directions. The recommendation is to follow the code below first, and then, upload your own Lambda once you have completed the lab as a whole.</p>
<ol start="171">
<li>In the AWS Management Console, on the Services menu, click <strong>Lambda</strong>.</li>
<li>Click <strong>Create function</strong> and make the following changes:
<ul>
<li>In the <strong>Name</strong> field, enter: <input readonly class="copyable-inline-input" size="31" type="text" value="PollyNotes-CreateUpdateFunction">
</li>
<li>For <strong>Runtime</strong>, select <strong>Java 8</strong>.</li>
<li>For <strong>Existing role</strong>, select <strong>PollyNotesRole</strong>.</li>
</ul>
</li>
<li>Click <strong>Create function</strong>.</li>
<li>
<p>In the <strong>Function code</strong> section, click <strong>Upload</strong> and select the ZIP file that you downloaded earlier in this section.</p>
<ul>
<li>For <strong>Handler</strong>, enter: <input readonly class="copyable-inline-input" size="62" type="text" value="com.amazonaws.pollynotes.solution.CreateUpdateFunctionSolution">
</li>
</ul>
</li>
<li><p>In the <strong>Basic settings</strong> section, move the slider of <strong>Memory (MB)</strong> from 512MB to <strong>1024MB</strong> so that your Lambda function can start faster on the first load.</p></li>
<li><p>Click <strong>Save</strong>.</p></li>
<li><p>Next, test the code. Click <strong>Test</strong>.</p></li>
<li><p>In the <strong>Event name</strong> field, enter: <input readonly class="copyable-inline-input" size="16" type="text" value="CreateUpdateTest"></p></li>
<li><p>Replace the JSON payload with the following:</p></li>
</ol><pre class="highlight json"><code><span class="p">{</span><span class="w">&#x000A;    </span><span class="s2">"userId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"testuser"</span><span class="p">,</span><span class="w">&#x000A;    </span><span class="s2">"noteId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"001"</span><span class="p">,</span><span class="w">&#x000A;    </span><span class="s2">"note"</span><span class="p">:</span><span class="w"> </span><span class="s2">"My very new note to myself"</span><span class="w">&#x000A;</span><span class="p">}</span><span class="w">&#x000A;</span></code></pre><ol start="180">
<li>Click <strong>Create</strong>. </li>
<li>Click <strong>Test</strong>. </li>
</ol>
<p><strong>Note</strong> It is normal for it to take a little longer as this is the first time you are running your Lambda function.</p>

<p>There should be a green checkmark just under the name of your Lambda function name on the left indicating <em>Execution result: succeeded (logs)</em>. </p>
<ol start="182">
<li>Click the <strong>Details</strong> link under that text. You should see the output of your Lambda function providing the noteId that you just uploaded. For example, <input readonly class="copyable-inline-input" size="5" type="text" value='"001"'>
</li>
</ol>
<p>You have now created your Lambda CreateUpdate function using the Solution code.</p>

<h3>Task 10.3: Creating the Lambda SearchFunction</h3>

<p>If you would prefer to code this function, you can follow the <a href="#manuallambda">Developing Lambda Functions Manually</a> directions. The recommendation is to follow the code below first, and then, upload your own Lambda once you have completed the lab as a whole.</p>
<ol start="183">
<li>In the AWS Management Console, on the Services menu, click <strong>Lambda</strong>.</li>
<li>Click <strong>Create function</strong> and make the following changes:
<ul>
<li>In the <strong>Name</strong> field, enter: <input readonly class="copyable-inline-input" size="25" type="text" value="PollyNotes-SearchFunction">
</li>
<li>For <strong>Runtime</strong>, select <strong>Java 8</strong>.</li>
<li>For <strong>Existing role</strong>, select <strong>PollyNotesRole</strong>.</li>
</ul>
</li>
<li>Click <strong>Create function</strong>.</li>
<li>
<p>In the <strong>Function code</strong> section, click <strong>Upload</strong> and select the ZIP file you downloaded at the beginning of this section.</p>
<ul>
<li>For <strong>Handler</strong>, enter: <input readonly class="copyable-inline-input" size="56" type="text" value="com.amazonaws.pollynotes.solution.SearchFunctionSolution">
</li>
</ul>
</li>
<li><p>In the <strong>Basic settings</strong> section, move the slider of <strong>Memory (MB)</strong> from 512MB to <strong>1024MB</strong> so that your Lambda function can start faster on the first load.</p></li>
<li><p>Click <strong>Save</strong>.</p></li>
<li><p>Next, test the code. Click <strong>Test</strong>.</p></li>
<li><p>In the <strong>Event name</strong> field, enter: <input readonly class="copyable-inline-input" size="10" type="text" value="SearchTest"></p></li>
<li><p>Replace the JSON payload with the following:</p></li>
</ol><pre class="highlight json"><code><span class="p">{</span><span class="w">&#x000A;    </span><span class="s2">"userId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"testuser"</span><span class="p">,</span><span class="w">&#x000A;    </span><span class="s2">"note"</span><span class="p">:</span><span class="w"> </span><span class="s2">"very"</span><span class="w">&#x000A;</span><span class="p">}</span><span class="w">&#x000A;</span></code></pre><ol start="192">
<li>Click <strong>Create</strong>.</li>
<li>Click <strong>Test</strong>. </li>
</ol>
<p><strong>Note</strong> It is normal for it to take a little longer as this is the first time you are running your Lambda function.</p>

<p>There should be a green checkmark just under the name of your Lambda function name on the left indicating <em>Execution result: succeeded (logs)</em>. </p>
<ol start="194">
<li>Click the <strong>Details</strong> link under that text. You should see the output of your Lambda function listing a the note you just searched for using the <input readonly class="copyable-inline-input" size="4" type="text" value="very"> keyword that was just created in your previous CreateUpdateFunction.</li>
</ol><pre class="highlight plaintext"><code>[&#x000A;    {&#x000A;        "userId": "testuser",&#x000A;        "noteId": "001",&#x000A;        "note": "My very new note to myself"&#x000A;    }&#x000A;]&#x000A;</code></pre>
<p>You have now created your Lambda Search function by using the Solution Code.</p>

<h3>Task 10.4: Creating the Lambda DeleteFunction</h3>

<p>If you would prefer to code this function, you can follow the <a href="#manuallambda">Developing Lambda Functions Manually</a> directions. The recommendation is to follow the code below first, and then, upload your own Lambda once you have completed the lab as a whole.</p>
<ol start="195">
<li>In the AWS Management Console, on the Services menu, click <strong>Lambda</strong>.</li>
<li>Click <strong>Create function</strong> and make the following changes:
<ul>
<li>In the <strong>Name</strong> field, enter: <input readonly class="copyable-inline-input" size="25" type="text" value="PollyNotes-DeleteFunction">
</li>
<li>For <strong>Runtime</strong>, select <strong>Java 8</strong>.</li>
<li>For <strong>Existing role</strong>, select <strong>PollyNotesRole</strong>.</li>
</ul>
</li>
<li>
<p>In the <strong>Function code</strong> section, click <strong>Upload</strong> and select the ZIP file you downloaded at the beginning of this section.</p>
<ul>
<li>For <strong>Handler</strong>, enter: <input readonly class="copyable-inline-input" size="56" type="text" value="com.amazonaws.pollynotes.solution.DeleteFunctionSolution">
</li>
</ul>
</li>
<li><p>In the <strong>Basic settings</strong> section, move the slider of <strong>Memory (MB)</strong> from 512MB to <strong>1024MB</strong> so that your Lambda function can start faster on the first load.</p></li>
<li><p>Click <strong>Save</strong>.</p></li>
<li><p>Next, test the code. Click <strong>Test</strong>.</p></li>
<li><p>In the <strong>Event name</strong> field, enter: <input readonly class="copyable-inline-input" size="10" type="text" value="DeleteTest"></p></li>
<li><p>Replace the JSON payload with the following:  </p></li>
</ol><pre class="highlight plaintext"><code>{&#x000A;    "userId": "testuser",&#x000A;    "noteId": "001"&#x000A;}&#x000A;</code></pre><ol start="203">
<li>Click <strong>Create</strong>.</li>
<li>Click <strong>Test</strong>.</li>
</ol>
<p><strong>Note</strong> It is normal for it to take a little longer as this is the first time you are running your Lambda function.</p>

<p>There should be a green checkmark just under the name of your Lambda function name on the left side of the screen with text mentioning: <em>Execution result: succeeded (logs)</em>. </p>
<ol start="205">
<li>Click the <strong>Details</strong> link under that text. You should see the output of your Lambda function providing the noteId that you just deleted. For example, <input readonly class="copyable-inline-input" size="5" type="text" value='"001"'>.</li>
</ol>
<p>You have now created your Lambda Delete function using by the Solution Code.</p>



<h2 id='step11'>Task 11: Creating the Remaining Restful API</h2>

<p>In this section, you create the remaining Restful API.</p>

<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/lab-7-diagram.PNG" alt="Lab 6 Diagram"></p>
<ol start="206">
<li>On the Services menu, click <strong>API Gateway</strong>.</li>
<li>Click <strong>PollyNotesAPI</strong>.</li>
<li>Click the <strong>/notes/GET</strong> method.</li>
<li>Click <strong>Integration Request</strong>.</li>
<li>Scroll to the bottom and click to expand <strong>Mapping Templates</strong>.</li>
<li>Click <strong>application/json</strong>. </li>
<li>Scroll down and replace the mapping template with the following:</li>
</ol><pre class="highlight json"><code><span class="p">{</span><span class="w">&#x000A;    </span><span class="s2">"userId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$context.authorizer.claims.sub"</span><span class="w">&#x000A;</span><span class="p">}</span><span class="w">&#x000A;</span></code></pre>
<p><strong>Note</strong> You are now removing the hardcoded value of <em>testuser</em> to a variable that is dynamically populated based on your authorizer. In this case, the authorizer is Cognito. This means, <em>userId</em> will now be set to the value of the Cognito ID of the user login in.</p>
<ol start="213">
<li>Click <strong>Save</strong>.</li>
<li>Download the following Swagger file (API-Gateway-for-students-swagger.yaml):</li>
</ol>
<p><strong>Source file:</strong> <a href="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/API-Gateway-for-students-swagger.yaml" target="_blank">SWAGGER</a></p>
<ol start="215">
<li>Modify line 11 of the file to replace it with your Cognito User Pool ARN (in between the quotes "").</li>
<li>
<strong>Save</strong> the file.</li>
<li>Click <strong>Actions</strong> and select <strong>Import API</strong>.</li>
<li>Scroll to the bottom of the page and change the <strong>Import mode</strong> to <strong>Merge</strong>.</li>
<li>Click <strong>Select Swagger File</strong> and then select your saved Swagger file.</li>
<li>Click <strong>Import</strong>.</li>
</ol>
<p>The Swagger file will create the additional resources and methods for your API. You still need to integrate the Methods with your Lambda functions. </p>
<ol start="221">
<li>Click the <strong>/notes/POST</strong> method.</li>
</ol><ul>
<li>Click <strong>Integration Request</strong>.</li>
<li>For <strong>Lambda Region</strong>, click <strong>Edit</strong> (pencil icon). Select your Lambda Region based on what you have noted before and then, click the checkmark tick.</li>
<li>For <strong>Lambda Function</strong>, type P and then select <strong>PollyNotes-CreateUpdateFunction</strong>. Click the checkmark tick..</li>
<li>In the dialog box, click <strong>OK</strong> to accept and allow invocation permissions to be created and your trigger to be setup.</li>
<li>Repeat these steps for the remaining methods with the following mappings:
<ul>
<li>
<strong>/notes/POST</strong>     PollyNotes-CreateUpdateFunction</li>
<li>
<strong>/search/GET</strong>     PollyNotes-SearchFunction</li>
<li>
<strong>/{id}/DELETE</strong>    PollyNotes-DeleteFunction</li>
<li>
<strong>/{id}/POST</strong>      PollyNotes-DictateFunction</li>
</ul>
</li>
</ul>
<p>Once you have completed the steps for each of the above methods, complete the following:</p>
<ol start="222">
<li>Click <strong>Actions</strong> and select <strong>Deploy API</strong>.</li>
<li>Select the <strong>prod</strong> stage, and then, click <strong>Deploy</strong>.</li>
</ol>
<p>Your API should now be fully functional. </p>



<h2 id='step12'>Task 12: Testing the Web Application</h2>

<p>In this task, you test the web application by loading your S3 Hosted URL.</p>

<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/lab-7-diagram.PNG" alt="Lab 6 Diagram"></p>

<p><strong>Note</strong> You can obtain your S3 Hosted URL by going into the S3 Console. Select your web hosting bucket. Click the <strong>Properties</strong> tab, and then, click <strong>Static website hosting</strong>.</p>

<p>Test the application by entering some text.</p>

<p><img src="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/website.PNG" alt="Cognito Review Defaults"></p>

<p>Congratulations! You have completed developing this end to end application.</p>

<h2 id='step13'>Completing the Lab</h2>

<p>You have completed the main tasks for this lab! Complete the following steps to clean up your lab environment and to notify your instructor that your lab is complete.</p>
<ol start="224">
<li>To sign out of the AWS Management Console, click <strong>awsstudent</strong>  at the top of the console, and then click <strong>Sign Out</strong> .</li>
<li>On the Qwiklabs page, click <strong>End Lab</strong>.</li>
</ol>
<p>Congratulations! You are done!</p>

<h2 id='step14'>End of Lab</h2>

<p><a id="manuallambda"></a></p>

<h2 id='step15'>Appendix 1: Developing Lambda Functions Manually</h2>

<p>If you have decided to develop your own Lambda functions for the CreateUpdate, Search and Delete function, you can follow the his section. This section assumes that you have deployed the other Lambda functions using the Solution file already which means that you have created a Test event in the Lambda UI and that you know how to run the Test.</p>
<ul>
<li>The code to start with for all 3 Lambda function is under the <input readonly class="copyable-inline-input" size="13" type="text" value="src/java/main"> under their respective <strong>...Function.java</strong> file.</li>
<li>To test the Lambda function, you can run the appropriate <strong>...FunctionTest.java</strong> which will launch the appropriate function handler with the right arguments. </li>
<li>Take a note that Updating an Item or Creating an Item is very similar in DynamoDB. This is why the same function with the same parameters can handle the creation and the update.</li>
<li>The following example is a good place to start for the CreateUpdate and Delete Functions <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBMapper.CRUDExample1.html" target="_blank">CRUD Operations</a>.</li>
<li>The <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBMapper.QueryScanExample.html" target="_blank">Query and Scan</a> is a good place to start for the Search Function. </li>
<li>If you were to develop your own DictateFunction, you will realize that there is a need for the <em>MP3_BUCKET_NAME</em> environment variable. To be able to run the lab locally, you will need to add that environment variable. For this to take effect in Eclipse, you will have to restart it after executing the command below. To set the environment variable, open a PowerShell window and run the following command by replacing the Bucket name with your MP3 Bucket Name <input readonly class="copyable-inline-input" size="62" type="text" value="setx MP3_BUCKET_NAME polly-notes-mp3-&lt;firstname&gt;-&lt;lastname&gt; /M">.</li>
</ul>
<h3>Upload your Lambda Function</h3>

<p>To upload the Lambda functions, you can deploy via the Eclipse IDE the same way as you have deployed the ListFunction. </p>
<ol start="226">
<li>In the Project Explorer, <strong>right-click</strong> the folder called <input readonly class="copyable-inline-input" size="13" type="text" value="src/main/java"> and select <strong>Amazon Web Services &gt;&gt; Upload function to AWS Lambda...</strong>
</li>
<li>For <strong>Select the Handler</strong>, select <input readonly class="copyable-inline-input" size="58" type="text" value="com.amazonaws.pollynotes.functions.&lt;name-of-your-function&gt;">
</li>
<li>For <strong>Select the AWS Region</strong>, select the region for your lab. Ask you instructor if you don't remember.</li>
<li>Select <strong>Choose an existing Lambda function</strong> and choose the Lambda function appropriate to the function you want to upload.</li>
<li>Click <strong>Next</strong>.</li>
<li>In the <strong>Memory (MB)</strong> field, replace the content with <em>1024</em>, so that your Lambda function can start faster on the first load.</li>
<li>Click <strong>Finish</strong>.</li>
<li>Make sure that you test the Lambda function by clicking <strong>Test</strong> in the Lambda Console.</li>
</ol>
<h2 id='step16'>Appendix 2: Troubleshooting</h2>

<p>So, you broke it. Don't worry, hopefully the information in this section will help you get things up and running! If you work through these troubleshooting tips and your application is still not working, ask your instructor to help you.</p>

<p>There are a number of useful tools at your disposal to help you troubleshoot.</p>

<p><strong>AWS CloudWatch Logs</strong></p>

<p>CloudWatch logs will provide you with information on the following:</p>
<ul>
<li>API Gateway</li>
<li>Lambda</li>
</ul><ol start="234">
<li>To access the logs, complete the following steps:</li>
</ol><ul>
<li>Click <strong>Services</strong>, and then, click <strong>CloudWatch</strong>.</li>
<li>Click <strong>Logs</strong>.</li>
<li>
<p>Select one of the following:</p>

<p><strong>API-Gateway-Execution-Logs_xxxxxxxxxx/prod</strong>  (For your API Logs)</p>

<p><strong>/aws/lambda/PollyNotes-xxxxxxxxFunction</strong>     (For your Lambda Function)</p>
</li>
</ul><ol start="235">
<li><p>When you click the link, you will see your log streams, sorted by <em>last event time</em> with the most recently updated at the top. <strong>Click the very top log stream</strong>.</p></li>
<li><p>Scroll down to see the latest events and look for any errors.</p></li>
</ol>
<p>Your API will log inbound and outbound payloads; your Lambda functions will log errors and any print statements that are included in the function. Both of these are very useful in troubleshooting.</p>

<p><strong>Front End Application</strong></p>

<p>The experience that you have in the application is often a good indicator of the issue. For example, if your application is not creating or updating records, but is listing ok; the issue may likely be with your /notes/POST method or your PollyNotes-CreateUpdateFunction. The logs will help you troubleshoot the issue. </p>

<p>Remember, the API Gateway Method to Lambda mappings are as follows:</p>
<ul>
<li><p><strong>/notes/GET --&gt; PollyNotes-ListFunction</strong></p></li>
<li><p><strong>/notes/POST --&gt; PollyNotes-CreateUpdateFunction</strong></p></li>
<li><p><strong>/search/GET --&gt; PollyNotes-SearchFunction</strong></p></li>
<li><p><strong>/{id}/DELETE --&gt; PollyNotes-DeleteFunction</strong></p></li>
<li><p><strong>/{id}/POST --&gt; PollyNotes-DictateFunction</strong></p></li>
</ul>
<p><strong>Behavior Expected in the Application</strong></p>
<ul>
<li><p><strong>/notes/GET --&gt; PollyNotes-ListFunction</strong>: If this isn't working, the application will fail to show any items in the web interface.</p></li>
<li><p><strong>/notes/POST --&gt; PollyNotes-CreateUpdateFunction</strong>: If this isn't working, you will not be able to create or update notes.</p></li>
<li><p><strong>/search/GET --&gt; PollyNotes-SearchFunction</strong>: If this isn't working, you will not be able to search.</p></li>
<li><p><strong>/{id}/DELETE --&gt; PollyNotes-DeleteFunction</strong>: If this isn't working, you will not be able to delete notes.</p></li>
<li><p><strong>/{id}/POST --&gt; PollyNotes-DictateFunction</strong>: If this isn't working, you will not be able to play any audio from the application.</p></li>
</ul>
<p>The following file is a full completed Swagger file. If you create an empty new API, import this, and it will create all of the resources / methods for you. You will still need to integrate your methods with your Lambda functions. This could be good for troubleshooting if you break something in your API, you could delete all resources, then import this file, and re-integrate your Lambda functions.</p>

<p><strong>Source file:</strong> <a href="http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.0.2/lab-7-end-to-end-app/scripts/API-Gateway-full-swagger.yaml" target="_blank">Full Swagger File</a></p>

<p><strong>Common Mistakes</strong></p>
<ul>
<li><p><strong>Number 1:</strong> Invalid DynamoDB Table Name (Case sensitive)</p></li>
<li><p><strong>Number 2:</strong> Lambda Environment Variables Not entered correctly</p></li>
<li><p><strong>Number 3:</strong> API Gateway - Lambda's not mapped to the correct Methods</p></li>
</ul>
<p>Hopefully these troubleshooting tips helped you to solve any errors that you had. If you still have errors, contact your instructor.</p>

<p><a id="connect_dev"></a></p>

<h2 id='step17'>Appendix 3: Connecting to Your Development Environment</h2>

<p>You can connect to your Dev instance by using one of the following methods:</p>
<ul>
<li>Use Apache Guacamole to connect to your Windows Dev instance</li>
<li>Use Remote Desktop to connect to your Windows Dev instance</li>
</ul>
<p>To connect to the <strong>Windows EC2 instance</strong> by using Guacamole (Recommended), see the following directions:</p>
<ul>
<li><a href="#connect_guacamole">Connect to your Windows Dev instance by using Apache Guacamole</a></li>
</ul>
<p>To connect to the <strong>Windows EC2 instance</strong> by using RDP, see the following directions:</p>
<ul>
<li><a href="#connect_win_win">Connect to your Windows Dev Instance from a Windows Machine</a></li>
<li><a href="#connect_win_mac">Connect to your Windows Dev Instance from a macOS Machine</a></li>
</ul>
<p><a id="connect_guacamole"></a></p>

<h2 id='step18'>Connect to your Windows Dev instance by using Apache Guacamole</h2>
<ol start="237">
<li><p>In the <strong>Connection Details</strong> section in Qwiklabs, go to the bottom for the Guacamole information. Copy the <strong>GuacamoleLink</strong> and paste it into a browser.</p></li>
<li><p>Go back to Qwiklabs and copy the <strong>WindowsPassword</strong> to the clipboard.</p></li>
<li><p>Go to the Apache Guacamole sign-in in the browser. Sign in by using the following steps:</p></li>
</ol><ul>
<li>For <strong>Username</strong>, enter: <input readonly class="copyable-inline-input" size="7" type="text" value="student">
</li>
<li>For <strong>Password</strong>, paste the password from the clipboard.</li>
<li>Click <strong>Log In</strong>.</li>
</ul>
<p>Your connection to your remote instance should start momentarily. Once you open a connection, you will see an image of the Dev instance desktop. You can interact with this image just as you would with your normal desktop, or any remote desktop client.</p>

<p>You are now connected to your Windows Dev instance in the browser via Guacamole. </p>

<p><strong>Tip</strong> Web browsers don't provide access to clipboard data, which means synchronization between your local clipboard and the remote clipboard is impossible. To copy and paste when using Guacamole, you must use the Clipboard editor. To open the Clipboard editor, click <strong>Ctrl -&gt; Alt -&gt; Shift</strong>. </p>

<p>Copy your text and paste it to the Clipboard editor. Then, from the Clipboard editor paste the text into your Dev instance. You can also edit the text that you place in the Clipboard editor before pasting into your remote desktop. To close the Clipboard editor, click <strong>Ctrl -&gt; Alt -&gt; Shift</strong>. </p>

<p>To continue this lab, move on to <a href="#continueafterconnection">Creating a User for the Cognito User Pool</a> task.</p>

<p><a id="connect_win_win"></a></p>

<h2 id='step19'>Connect to your Windows Dev Instance from a Windows Machine</h2>

<p>In this task, you will connect to a Windows EC2 instance from your Windows machine.</p>

<p><strong>Note</strong> Perform the steps in this task only if you are connecting to <strong>Windows Dev Instance</strong> from a Windows machine.    </p>
<ol start="240">
<li><p>In Qwiklabs, go to the <strong>Connection Details</strong> section and copy the <strong>WindowsInstanceIP</strong> to the clipboard.</p></li>
<li><p>Open the Remote Desktop Connection application on your computer.</p></li>
</ol><ul>
<li>On Windows 7, click the <strong>Start</strong> icon, and in the <strong>Search programs and files</strong> textbox, type <input readonly class="copyable-inline-input" size="25" type="text" value="Remote Desktop Connection">. Click the application when it appears in the <strong>Programs</strong> list.</li>
<li>On Windows 8, activate the Charms menu by moving the cursor into the lower right corner of the screen, and click the <strong>Search</strong> icon. Type in <input readonly class="copyable-inline-input" size="25" type="text" value="Remote Desktop Connection">. Click the application when it appears in the <strong>Programs</strong> list.</li>
<li>On Windows 10, click the <strong>Start</strong> icon, and click the <strong>Search</strong> icon. Type in <input readonly class="copyable-inline-input" size="25" type="text" value="Remote Desktop Connection">. Click the application when it appears in the <strong>Programs</strong> list.</li>
</ul><ol start="242">
<li><p>In Remote Desktop Connection, for <strong>Computer</strong>, paste the IP of your Windows instance that you copied.</p></li>
<li><p>Click <strong>Connect</strong>.</p></li>
<li><p>Remote Desktop Connection will prompt you with a Login dialog asking for your username and password. By default, the application will use your current Windows username and domain. To change this, click <strong>Use another account</strong>.</p></li>
</ol>
<p><strong>Note</strong> On Windows 10, click <strong>More Choices</strong> before selecting <strong>Use a different account</strong>.</p>
<ol start="245">
<li><p>Go back to Qwiklabs and copy the <strong>WindowsPassword</strong> to the clipboard.   </p></li>
<li><p>For your login credentials, use the following values:</p></li>
</ol><ul>
<li>For <strong>User name</strong>, enter: <input readonly class="copyable-inline-input" size="14" type="text" value="\Administrator">
</li>
<li>For <strong>Password</strong>, paste the password from the clipboard.</li>
</ul>
<p><strong>Note</strong> The <input readonly class="copyable-inline-input" size="1" type="text" value="\"> in the user name is important, as it tells Remote Desktop Connection that you are logging in as the local Administrator, and not as a domain user.</p>
<ol start="247">
<li>To connect to your instance, click <strong>OK</strong>. If you receive a prompt that the certificate used to verify the connection was not a known, trusted root certificate, click <strong>Yes</strong>.</li>
</ol>
<p><strong>Result</strong></p>

<p>Your connection to your remote instance should start momentarily. When lab instructions in subsequent sections require a command window, open or use a Powershell window.</p>

<p>To continue this lab, move on to <a href="#continueafterconnection">Creating a User for the Cognito User Pool</a> task.</p>

<p><a id="connect_win_mac"></a></p>

<h2 id='step20'>Connect to your Windows Dev Instance from a macOS Machine</h2>

<p>In this section, you will connect to a Windows EC2 instance from your macOS machine.</p>
<ol start="248">
<li><p>In Qwiklabs, go to the <strong>Connection Details</strong> section and copy the <strong>WindowsInstanceIP</strong> to the clipboard.</p></li>
<li><p>Install Microsoft Remote Desktop if it is not already installed. To install, complete the following:</p></li>
</ol><ul>
<li>At the top of the screen, click the Apple icon.</li>
<li>Select <strong>About This Mac</strong>.</li>
<li>Take note of your macOS version.</li>
<li>From the Dock, launch <strong>App store</strong>.</li>
<li>Search for the following string: <input readonly class="copyable-inline-input" size="24" type="text" value="Microsoft Remote Desktop">
</li>
<li>If your macOS version is OSX 10.11+, select <strong>Microsoft Remote Desktop 10</strong>.</li>
<li>If your macOS version is OSX 10.9 - 10.10, select <strong>Microsoft Remote Desktop 8.0</strong>
</li>
<li>Click <strong>Install</strong> or <strong>GET</strong> to install the appropriate version.</li>
</ul><ol start="250">
<li><p>To open <strong>Microsoft Remote Desktop</strong>, on the Dock, click <strong>Launchpad</strong>. Then, click <strong>Microsoft Remote Desktop</strong>.</p></li>
<li><p>To create a new connection, click <strong>New</strong> (v8.0) or <strong>Add desktop</strong> (v10). <strong>Note</strong> For v10, once you click Add Desktop, you will need to click <strong>Show More</strong> to enter the following details:  </p></li>
</ol>
<p>Use the following values:</p>
<ul>
<li>For <strong>Connection name (v8)/ Friendly Name (v10)</strong>, enter: <input readonly class="copyable-inline-input" size="20" type="text" value="Windows Dev Instance">
</li>
<li>For <strong>PC Name</strong>, paste in the IP address of your Windows Server instance that you copied to the clipboard.</li>
<li>For <strong>User name (v8.0)</strong>, enter: <input readonly class="copyable-inline-input" size="14" type="text" value="\Administrator">
</li>
<li>For <strong>User name (v10)</strong>, enter: <input readonly class="copyable-inline-input" size="13" type="text" value="Administrator">
</li>
</ul>
<p><strong>Note</strong> For v10 users, you will need to click <strong>User Account</strong> and <strong>Add User Account</strong> to be able to paste the username and password.</p>
<ol start="252">
<li><p>Go back to Qwiklabs and copy the <strong>WindowsPassword</strong> to the clipboard.   </p></li>
<li><p>Go back to your Microsoft Remote Desktop connection window and enter the following value:</p></li>
</ol><ul>
<li>For <strong>Password</strong>, paste in the password that you copied to the clipboard.</li>
</ul>
<p><strong>Note</strong> The <input readonly class="copyable-inline-input" size="1" type="text" value="\"> in the user name is important, as it tells Remote Desktop Connection that you are logging in as the local Administrator, and not as a domain user.</p>
<ol start="254">
<li><p><strong>For v8.0 only</strong>: Close the <em>Edit Remote Desktops</em> window by clicking on the button on the top left corner.</p></li>
<li><p>In the <em>Microsoft Remote Desktop</em> window, double click the connection titled <strong>Windows Dev Instance</strong>.</p></li>
<li><p>In the <em>Verify Certificate</em> dialog, click <strong>Continue</strong> to complete the connection.</p></li>
</ol>
<p><strong>Result</strong></p>

<p>Your connection to your remote instance should start momentarily. When lab instructions in subsequent sections require a command window, open or use a Powershell window.</p>

<p>To continue this lab, move on to <a href="#continueafterconnection">Creating a User for the Cognito User Pool</a> task.</p>

</div>
<div class='js-lab-content-outline lab-content__outline'>
<a href='#step1'>Task 1: Connecting to Your Development Environment</a><a href='#step2'>Task 2: Cognito Authentication</a><a href='#step3'>Task 3: Creating a DynamoDB table</a><a href='#step4'>Task 4: Creating S3 buckets</a><a href='#step5'>Task 5: Creating an IAM Policy and Role</a><a href='#step6'>Task 6: Creating the Lambda ListFunction</a><a href='#step7'>Task 7: Creating the API Gateway</a><a href='#step8'>Task 8: Creating the Front-End Website</a><a href='#step9'>Task 9: Testing the Web Application</a><a href='#step10'>Task 10: Creating the Remaining Lambda Functions</a><a href='#step11'>Task 11: Creating the Remaining Restful API</a><a href='#step12'>Task 12: Testing the Web Application</a><a href='#step13'>Completing the Lab</a><a href='#step14'>End of Lab</a><a href='#step15'>Appendix 1: Developing Lambda Functions Manually</a><a href='#step16'>Appendix 2: Troubleshooting</a><a href='#step17'>Appendix 3: Connecting to Your Development Environment</a><a href='#step18'>Connect to your Windows Dev instance by using Apache Guacamole</a><a href='#step19'>Connect to your Windows Dev Instance from a Windows Machine</a><a href='#step20'>Connect to your Windows Dev Instance from a macOS Machine</a>
</div>

</div>


</div>
</div>
<div class='lab-buttons'>
<a class='mdl-button mdl-js-button mdl-button--fab mdl-button--large-fab mdl-js-ripple-effect mdl-button--accent mdl-shadow--8dp help-button' data-target='#lab-help-modal' data-toggle='modal'>
<i class='material-icons'>help</i>
</a>
</div>
<div class='lab-introduction js-lab-introduction is-hidden'>
<div class='lab-introduction__inner'>
<h1 class='headline-1'>Welcome to Your First Lab!</h1>
<div class='lab-introduction__video'>
<iframe allow='autoplay; encrypted-media' frameborder='0' id='lab-introduction' src='https://www.youtube.com/embed/yF7EDXKTmoQ?enablejsapi=1&amp;rel=0&amp;showinfo=0'></iframe>
</div>
<a class='button js-skip-button'>Skip</a>
</div>
</div>


</div>
</main>
<div class='bottom-menu'>
<a title="Home" class="side-menu__item js-navigation-button" href="/home"><div class='side-menu__item__icon'>
<i class='material-icons'>home</i>
</div>
<div class='side-menu__item__label'>
Home
</div>
</a>
<a title="Catalog" class="side-menu__item js-navigation-button" href="/catalog"><div class='side-menu__item__icon'>
<i class='material-icons'>school</i>
</div>
<div class='side-menu__item__label'>
Catalog
</div>
</a>
<a title="My Learning" class="side-menu__item js-navigation-button" href="/my_learning"><div class='side-menu__item__icon'>
<i class='material-icons'>event_note</i>
</div>
<div class='side-menu__item__label'>
My Learning
</div>
</a>
<a class='side-menu__item js-side-menu-button'>
<div class='side-menu__item__icon'>
<i class='material-icons'>menu</i>
</div>
<span class='side-menu__item__tooltip'>More</span>
<div class='side-menu__item__label'>
More
</div>
</a>
</div>

<div class='modal fade' id='support-modal'>
<div class='modal-container'>
<div class='mdl-shadow--24dp modal-content'>
<h4 class='modal-header'>How can we help you?</h4>
<form action="/contact_support" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="Zxlaavh9+x9tGJupfU09mjv5Rs1+NEXBTw/FPnRZyjRdrD4yVCVpAEg/Ff+DlTqIz0VyfdES30JEkKX31vtspg==" />
<div class='modal-body'>
<p class='l-mbl'>We will get back to you within 24 hours.</p>
<div class='form-row'>
<div class='control-group'>
<label for="Question">Question</label>
<input type="text" name="question" id="question" placeholder="Briefly describe your question" />
</div>
</div>
<div class='form-row'>
<div class='control-group'>
<label for="Details">Details</label>
<textarea name="description" id="description" rows="5" placeholder="Fill in the details here. Please try to be as specific as possible.&#x000A;">
</textarea>
</div>
</div>
<div class='form-row'>
<div class='control-group'>
<label for="Your_Name">Your name</label>
<input type="text" name="name" id="name" value="Niruban Kandasamy" />
</div>
<div class='control-group'>
<label for="Your_Email">Your email</label>
<input type="text" name="email" id="email" value="niruban@gmail.com" />
</div>
</div>
</div>
<div class='modal-actions'>
<a class='mdl-button mdl-button--cancel mdl-js-button mdl-js-ripple-effect l-mll' data-dismiss='modal'>
Nevermind
</a>
<input type="submit" name="commit" value="Submit" class="mdl-button mdl-button--primary mdl-js-button mdl-js-ripple-effect" data-disable-with="Submit" />
</div>
</form>



</div>
</div>
<iframe class='l-ie-iframe-fix'></iframe>
</div>
<div class='modal fade' id='lab-help-modal'>
<div class='modal-container'>
<div class='mdl-shadow--24dp modal-content'>
<h4 class='modal-header'>Get Help</h4>
<form action="/contact_support" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="acqSsQnf984Xj0gBVW6GzWfluRiHWF4clHFLgh3u619Tf/bppYdl0TKoxlertoHfk1mNqCh+xJ+f7itLv0xNzQ==" />
<div class='modal-body'>
<div class='control-group l-mbl'>
<label for="Question">Question</label>
<input type="text" name="question" id="question" placeholder="Briefly describe your question" />
</div>
<div class='control-group l-mbl'>
<label for="Details">Details</label>
<textarea name="description" id="description" rows="5" placeholder="Fill in the details here. Please try to be as specific as possible.&#x000A;">
</textarea>
</div>
<div class='control-group l-mbl'>
<label for="Your_Name">Your name</label>
<input type="text" name="name" id="name" value="Niruban Kandasamy" />
</div>
<div class='control-group l-mbl'>
<label for="Your_Email">Your email</label>
<input type="text" name="email" id="email" value="niruban@gmail.com" />
</div>
<div class='control-group l-mbl'>
<label for="Severity">Severity</label>
<select name="severity" id="severity"><option value="0">-</option>
<option value="severity_1">Severity 1 (Highest)</option>
<option value="severity_2">Severity 2</option>
<option value="severity_3">Severity 3</option>
<option value="severity_4">Severity 4</option>
<option value="severity_5">Severity 5 (Lowest)</option></select>
</div>
<div class='control-group'>
<div class='control-label'></div>
We will get back to you within 24 hours.
</div>
</div>
<div class='modal-actions'>
<a class='mdl-button mdl-button--primary mdl-js-button mdl-js-ripple-effect' data-dismiss='modal'>
Cancel
</a>
<input type="submit" name="commit" value="Submit" class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--primary" data-disable-with="Submit" />
</div>
</form>



</div>
</div>
<iframe class='l-ie-iframe-fix'></iframe>
</div>
<div class='modal fade' id='lab-details-modal'>
<div class='modal-container'>
<div class='mdl-shadow--24dp modal-content'>
<div class='modal-body'>
<p class='l-mbm'>
Developing on AWS is a three-day instructor led course.
</p>
<p class='small-label l-mbs'>
<strong>
Duration:
</strong>
19m setup
&middot;
180m access
&middot;
180m completion
</p>
<p class='small-label l-mbs'>
<strong>AWS Region:</strong>
[us-west-2] <strong>US West (Oregon)</strong>
</p>
<p class='small-label l-mbs'>

</p>
<p class='small-label'>
<strong>
Permalink:
</strong>
<a href="https://exitcertified.qwiklabs.com/catalog_lab/1781">https://exitcertified.qwiklabs.com/catalog_lab/1781</a>
</p>
</div>
<div class='modal-actions'>
<a class='mdl-button mdl-button--primary mdl-js-button mdl-js-ripple-effect' data-dismiss='modal'>
Got It
</a>
</div>


</div>
</div>
<iframe class='l-ie-iframe-fix'></iframe>
</div>
<div class='modal fade' id='lab-review-modal'>
<div class='modal-container'>
<div class='mdl-shadow--24dp modal-content'>
<form class="simple_form js-lab-review-form" id="edit_lab_review_25684" action="/lab_reviews/25684" accept-charset="UTF-8" data-remote="true" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="_method" value="patch" /><div class='modal-body'>
<p class='label'>
How satisfied are you with this lab?
</p>
<div class='rateit js-rateit' data-rateit-max='5' data-rateit-min='0' data-rateit-resetable='false' data-rateit-step='1' data-rateit-value='5'></div>
<div class='l-mtm'>

<div class="control-group hidden lab_review_user_id"><div class="controls"><input class="hidden" type="hidden" value="12101" name="lab_review[user_id]" id="lab_review_user_id" /></div></div>
<div class="control-group hidden lab_review_classroom_id"><div class="controls"><input class="hidden" type="hidden" value="1712" name="lab_review[classroom_id]" id="lab_review_classroom_id" /></div></div>
<div class="control-group hidden lab_review_lab_id"><div class="controls"><input class="hidden" type="hidden" value="1781" name="lab_review[lab_id]" id="lab_review_lab_id" /></div></div>
<div class="control-group hidden lab_review_focus_id"><div class="controls"><input class="hidden" type="hidden" value="11147" name="lab_review[focus_id]" id="lab_review_focus_id" /></div></div>
<div class="control-group hidden lab_review_rating"><div class="controls"><input class="hidden js-rating-input" type="hidden" value="2" name="lab_review[rating]" id="lab_review_rating" /></div></div>
<div class="control-group text optional lab_review_comment"><label class="text optional control-label" for="lab_review_comment">Comment</label><div class="controls"><textarea class="text optional" name="lab_review[comment]" id="lab_review_comment">
</textarea></div></div>
</div>
</div>
<div class='modal-actions'>
<a class='mdl-button mdl-button--primary mdl-js-button mdl-js-ripple-effect' data-dismiss='modal'>
Cancel
</a>
<input type="submit" name="commit" value="Submit" class="btn mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--primary" data-disable-with="Submit" />
</div>
</form>

</div>
</div>
<iframe class='l-ie-iframe-fix'></iframe>
</div>

<script>
  $( function() {
    ql.initMaterialInputs();
    initChosen();
    initSearch();
    initTabs();
    ql.list.init();
    ql.favoriting.init();
    ql.header.myAccount.init();
    initTooltips();
    ql.autocomplete.init();
    ql.toolbar.init();
    ql.modals.init();
    initExperiments();
    initLabContent( );
  ql.labOutline.init("11147");
  initLabReviewModal();
  initLabAssessment();
  initLabTranslations( {"are_you_sure":"All done? If you end this lab, you will lose all your work. You may not be able to restart the lab if there is a quota limit. Are you sure you want to end this lab?\n","in_progress":"*In Progress*","ending":"*Ending*","starting":"*Starting, please wait*","end_concurrent_labs":"Sorry, you can only run one lab at a time. To start this lab, please confirm that you want all of your existing labs to end.\n","copied":"Copied","no_resource":"Error retrieving resource.","no_support":"No Support","mac_press":"Press ⌘-C to copy","thanks_review":"Thanks for reviewing this lab.","windows_press":"Press Ctrl-C to copy","days":"days"} );
  initLabRun();
  ql.initHeader();
  ql.sideMenu.init();
  ql.navigation.init();
  
  });
</script>
</body>
</html>
